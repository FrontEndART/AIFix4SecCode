<?xml version="1.0" encoding="utf-8"?>
<graph>
  <header>
    <info name = "asg" value = "java"/>
  </header>
  <data>
    <node name = "Bad Practice Rules" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = ""/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Practice Rules"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "summarized"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "Violations of recommended and essential coding practice. Examples include hash code and equals problems, cloneable idiom, dropped exceptions, Serializable problems, and misuse of finalize. We strive to make this analysis accurate, although some groups may not care about some of the bad practices."/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Critical"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ACEJFE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ACEZFE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ACF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BEMSWFAO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BSC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_CAS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_CCIF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_CCRMV">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_CICBNC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_CNC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_CRCV">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_CSNO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ClMMIC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DESMREO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DMD">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DMI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DNCSE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DRFOE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DRUOO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DURTCC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EAS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ECFONCWT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ECPSWE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ECSWE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ECUOE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EGACC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ESNO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_FDNCSF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_FFNF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_FFONF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_FNS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_FU">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_GUTIGC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_HENH">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_HEUH">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_HHNE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_HHUOE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_HIEUH">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IDCI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IISC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_INSE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ISUSDI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_JDAIIT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_JFIFIIC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_JSONSOIS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MEFS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MMEF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MSVUID">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MeNC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NBRN">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NCNE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NFKUAI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NFKUAMI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NFNC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NSSNAI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NSSNAS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NTCRN">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NVCI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NWPI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_OODR">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_OODREP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_OOS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_OOSEP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_PCI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_PDREOII">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_REARTN">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RNC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RNROC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RRCBP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RRCBPB">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RRVIBP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SBF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SBFIC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SBFS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SCSBS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SIBFA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SIC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SNC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SNS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SNSC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SNSCFE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SRRMRO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SSMIIST">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_STFNR">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SeNS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SeNoS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UIUG">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UNCIE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_VFSUN">
        <edgePair/>
      </edge>
    </node>
    <node name = "Correctness Rules" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = ""/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Correctness Rules"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "summarized"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "Probable bug - an apparent coding mistake resulting in code that was probably not what the developer intended. We strive for a low false positive rate."/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Critical"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ADLIBDC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BAOSB">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BAZ">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BBAC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BBOA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BIC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BID">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BIOSB">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BSCHB">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BWAP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BcII">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BiI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_CCAES">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_CCEWTA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DAINVTR">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DAWO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DBM">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DCNFH">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DCSNCT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DDSOCL">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DFATCMSOSTPE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DIHOA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DIMM">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DITOA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DITOAA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DLBTDIOI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DOI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DSTPEWZCT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DVCTEM">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DVSCC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DmD">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EAAN">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EAF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EAT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EBAC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ECCN">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EDDEFE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EIAC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ENA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EOENS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EONO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EOUO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ESUO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EUCAI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EUI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EUT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EUTUPE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_FMEW">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_FMUFP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_FUW">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_GUT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_HSDHOUC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_HUOUC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IAMIFRM">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IATOOS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IBCWIV">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IBCWNV">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IBCWSB">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IBSA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IBSM">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ICATI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_II2LAI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IICTDPTC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IICTFPTR">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IIL">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IIRL">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IMROI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_INT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IPIDBO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ISNS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ITNS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_JUSS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MCMF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MMMF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MWSNAEC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NAMBN">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NAN">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NANE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NBE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NCN">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NGD">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NGDOEP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NLT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NNFNIIC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NNI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NNOSP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NNOSPE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NNPD">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NNPDATD">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NNPDN">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NNPV">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NNRV">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NORN">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NSINF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NUF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NVC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NWP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_OMMIS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_QQBA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_R0TI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RAI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RAL">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RAO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RAVOH">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RAVORI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RBSFRE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RCCFSRV">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RCUFSARE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RENT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RPUP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RRC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RRCT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RRNWHBAN">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RRVI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RSI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SBPSA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SBRA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SDSDTSF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SDSDTSFTT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SFSA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SFSC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SHMN">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SIOC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SIOU">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SLSAIOF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SLSC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SMMBP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SRRIS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SSI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_STDE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SaFSC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SaLSC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_TAVUWNR">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_TCVWITQ">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_TMSVRAS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_TMSVRNS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_TNVUWAR">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_TUVUWASR">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UNF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UPF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UUMOAC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UUR">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UURCFSC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UwUF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_VPAPTOV">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_VUR">
        <edgePair/>
      </edge>
    </node>
    <node name = "Dodgy Code Rules" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = ""/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Dodgy Code Rules"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "summarized"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "code that is confusing, anomalous, or written in a way that leads itself to errors. Examples include dead local stores, switch fall through, unconfirmed casts, and redundant null check of value known to be null. More false positives accepted. In previous versions of SpotBugs, this category was known as Style."/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Critical"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_APFIFC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BBCTAC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BBCTCC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BUC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BUCORV">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BVI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_CCAF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_CCAL">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_CCAR">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_CCD">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DDB">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DDLS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DDLSIR">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DDLSON">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DDLSSF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DDSC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DHAF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DLNLISS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DNOW">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DNUT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DUM">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DUS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EDOE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EU">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_FFPE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IACCO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IAIOIOOM">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IBCFO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IBRB1">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IIC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IICTD">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IIMCTL">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IQURS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IVBO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IVC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MBIS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MSSIF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MtSSIF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NDNSC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NDORV">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NIDOR">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NLOKNV">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NMPTA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NMRRA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NNOSPFRV">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NNOSPMBI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NNSC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NPMBNBMAN">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NUPOPF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_PPS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_PPZLA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_QQFL">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RCE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RCFPI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RDJNCR">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RRCONANV">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RRCTNV">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RRI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RRNONV">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RROH">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RRORI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RRVII">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RRVINSE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RcRNONV">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SFDA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SLDA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SLSA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SPRRNI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_STFONC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SWTSFIM">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_TEUSVRAS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_TEUSVRNS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UFNIIC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UUAM">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UUCF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UUCFNL">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UUCT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UUCo">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UUO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UUOS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UUPOPF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UUSM">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UUVM">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UuUPOPF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UwUPOPF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_XXFB">
        <edgePair/>
      </edge>
    </node>
    <node name = "Experimental Rules" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = ""/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Experimental Rules"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "summarized"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "Experimental and not fully vetted bug patterns"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Critical"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_LLLDTWR">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_OUO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_OUOEE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SCTB">
        <edgePair/>
      </edge>
    </node>
    <node name = "FB_ACEJFE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Creates an empty jar file entry"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Creates Empty Jar File Entry"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code calls &lt;code&gt;putNextEntry()&lt;/code&gt;, immediately followed by a call to &lt;code&gt;closeEntry()&lt;/code&gt;. This results in an empty JarFile entry. The contents of the entry should be written to the JarFile between the calls to &lt;code&gt;putNextEntry()&lt;/code&gt; and &lt;code&gt;closeEntry()&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ACEZFE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Creates an empty zip file entry"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Creates Empty Zip File Entry"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code calls &lt;code&gt;putNextEntry()&lt;/code&gt;, immediately followed by a call to &lt;code&gt;closeEntry()&lt;/code&gt;. This results in an empty ZipFile entry. The contents of the entry should be written to the ZipFile between the calls to &lt;code&gt;putNextEntry()&lt;/code&gt; and &lt;code&gt;closeEntry()&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ACF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Explicit invocation of finalizer"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Explicit Invocation"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains an explicit invocation of the &lt;code&gt;finalize()&lt;/code&gt; method on an object.Â  Because finalizer methods are supposed to be executed once, and only by the VM, this is a bad idea.&lt;/p&gt;&#x0A;&lt;p&gt;If a connected set of objects beings finalizable, then the VM will invoke the finalize method on all the finalizable object, possibly at the same time in different threads. Thus, it is a particularly bad idea, in the finalize method for a class X, invoke finalize on objects referenced by X, because they may already be getting finalized in a separate thread.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ADLIBDC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "BigDecimal constructed from double that isn&apos;t represented precisely"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bigdecimal Constructed From Double"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code creates a BigDecimal from a double value that doesnât translate well to a decimal number. For example, one might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. You probably want to use the BigDecimal.valueOf(double d) method, which uses the String representation of the double to create the BigDecimal (e.g., BigDecimal.valueOf(0.1) gives 0.1).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_AOSOCA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Sequence of calls to concurrent abstraction may not be atomic"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Operation Sequence On Concurrent Abstraction"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code contains a sequence of calls to a concurrent abstraction (such as a concurrent hash map). These calls will not be executed atomically.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_APFIFC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class is final but declares protected field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Confused Inheritance"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class is declared to be final, but declares fields to be protected. Since the class is final, it can not be derived from, and the use of protected is confusing. The access modifier for the field should be changed to private or public to represent the true use for the field.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Incompatible bit masks"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "And"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method compares an expression of the form (e &amp;amp; C) to D, which will always compare unequal due to the specific values of constants C and D. This may indicate a logic error or typo.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BAOSB" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Bitwise add of signed byte value"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Add Of Signed Byte"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Adds a byte value and a value which is known to have the 8 lower bits clear. Values loaded from a byte array are sign extended to 32 bits before any bitwise operations are performed on the value. Thus, if &lt;code&gt;b[0]&lt;/code&gt; contains the value &lt;code&gt;0xff&lt;/code&gt;, and &lt;code&gt;x&lt;/code&gt; is initially 0, then the code &lt;code&gt;((x &amp;lt;&amp;lt; 8) + b[0])&lt;/code&gt; will sign extend &lt;code&gt;0xff&lt;/code&gt; to get &lt;code&gt;0xffffffff&lt;/code&gt;, and thus give the value &lt;code&gt;0xffffffff&lt;/code&gt; as the result.&lt;/p&gt;&#x0A;&lt;p&gt;In particular, the following code for packing a byte array into an int is badly wrong:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;int result = 0;&#x0A;for(int i = 0; i &amp;lt; 4; i++)&#x0A;    result = ((result &amp;lt;&amp;lt; 8) + b[i]);&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;The following idiom will work instead:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;int result = 0;&#x0A;for(int i = 0; i &amp;lt; 4; i++)&#x0A;    result = ((result &amp;lt;&amp;lt; 8) + (b[i] &amp;amp; 0xff));&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BAZ" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Check to see if ((...) &amp; 0) == 0"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "And Zz"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method compares an expression of the form &lt;code&gt;(e &amp;amp; 0)&lt;/code&gt; to 0, which will always compare equal. This may indicate a logic error or typo.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BBAC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Bad Applet Constructor relies on uninitialized AppletStub"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Applet Constructor"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "This constructor calls methods in the parent Applet that rely on the&#x0A;AppletStub. Since the AppletStub isn&apos;t initialized until the init()&#x0A;method of this applet is called, these methods will not perform&#x0A;correctly.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BBCTAC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Questionable cast to abstract collection"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Cast To Abstract Collection"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code casts a Collection to an abstract collection (such as &lt;code&gt;List&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, or &lt;code&gt;Map&lt;/code&gt;). Ensure that you are guaranteed that the object is of the type you are casting to. If all you need is to be able to iterate through a collection, you donât need to cast it to a Set or List.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BBCTCC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Questionable cast to concrete collection"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Cast To Concrete Collection"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code casts an abstract collection (such as a Collection, List, or Set) to a specific concrete implementation (such as an ArrayList or HashSet). This might not be correct, and it may make your code fragile, since it makes it harder to switch to other concrete implementations at a future point. Unless you have a particular reason to do so, just use the abstract collection class.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BBIU" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Primitive value is boxed and then immediately unboxed"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Boxing Immediately Unboxed"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A primitive is boxed, and then immediately unboxed. This probably is due to a manual boxing in a place where an unboxed value is required, thus forcing the compiler to immediately undo the work of the boxing.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BBIUTPC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Primitive value is boxed then unboxed to perform primitive coercion"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Boxing Immediately Unboxed To Perform Coercion"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A primitive boxed value constructed and then immediately converted into a different primitive type (e.g., &lt;code&gt;new Double(d).intValue()&lt;/code&gt;). Just perform direct primitive coercion (e.g., &lt;code&gt;(int) d&lt;/code&gt;).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BBOA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class overrides a method implemented in super class Adapter wrongly"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Badly Overridden Adapter"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method overrides a method found in a parent class, where that class is an Adapter that implements a listener defined in the java.awt.event or javax.swing.event package. As a result, this method will not get called when the event occurs.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Doomed test for equality to NaN"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Test If Equal To Not A Number"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code checks to see if a floating point value is equal to the special Not A Number value (e.g., &lt;code&gt;if (x == Double.NaN)&lt;/code&gt;). However, because of the special semantics of &lt;code&gt;NaN&lt;/code&gt;, no value is equal to &lt;code&gt;Nan&lt;/code&gt;, including &lt;code&gt;NaN&lt;/code&gt;. Thus, &lt;code&gt;x == Double.NaN&lt;/code&gt; always evaluates to false. To check to see if a value contained in &lt;code&gt;x&lt;/code&gt; is the special Not A Number value, use &lt;code&gt;Double.isNaN(x)&lt;/code&gt; (or &lt;code&gt;Float.isNaN(x)&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is floating point precision).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BEMSWFAO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Equals method should not assume anything about the type of its argument"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Equals Method Should Work For All Objects"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The &lt;code&gt;equals(Object o)&lt;/code&gt; method shouldnât make any assumptions about the type of &lt;code&gt;o&lt;/code&gt;. It should simply return false if &lt;code&gt;o&lt;/code&gt; is not the same type as &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BIC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Impossible cast"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Impossible Cast"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This cast will always throw a ClassCastException. SpotBugs tracks type information from instanceof checks, and also uses more precise information about the types of values returned from methods and loaded from fields. Thus, it may have more precise information that just the declared type of a variable, and can use this to determine that a cast will always throw an exception at runtime.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Critical"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BID" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Impossible downcast"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Impossible Downcast"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This cast will always throw a ClassCastException. The analysis believes it knows the precise type of the value being cast, and the attempt to downcast it to a subtype will always fail by throwing a ClassCastException.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Critical"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BIOSB" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Bitwise OR of signed byte value"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Ior Of Signed Byte"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Loads a byte value (e.g., a value loaded from a byte array or returned by a method with return type byte) and performs a bitwise OR with that value. Byte values are sign extended to 32 bits before any bitwise operations are performed on the value. Thus, if &lt;code&gt;b[0]&lt;/code&gt; contains the value &lt;code&gt;0xff&lt;/code&gt;, and &lt;code&gt;x&lt;/code&gt; is initially 0, then the code &lt;code&gt;((x &amp;lt;&amp;lt; 8) | b[0])&lt;/code&gt; will sign extend &lt;code&gt;0xff&lt;/code&gt; to get &lt;code&gt;0xffffffff&lt;/code&gt;, and thus give the value &lt;code&gt;0xffffffff&lt;/code&gt; as the result.&lt;/p&gt;&#x0A;&lt;p&gt;In particular, the following code for packing a byte array into an int is badly wrong:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;int result = 0;&#x0A;for(int i = 0; i &amp;lt; 4; i++) {&#x0A;    result = ((result &amp;lt;&amp;lt; 8) | b[i]);&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;The following idiom will work instead:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;int result = 0;&#x0A;for(int i = 0; i &amp;lt; 4; i++) {&#x0A;    result = ((result &amp;lt;&amp;lt; 8) | (b[i] &amp;amp; 0xff));&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BSC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Check for sign of bitwise operation"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Signed Check"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method compares an expression such as &lt;code&gt;((event.detail &amp;amp; SWT.SELECTED) &amp;gt; 0)&lt;/code&gt;. Using bit arithmetic and then comparing with the greater than operator can lead to unexpected results (of course depending on the value of SWT.SELECTED). If SWT.SELECTED is a negative number, this is a candidate for a bug. Even when SWT.SELECTED is not negative, it seems good practice to use â!= 0â instead of â&amp;gt; 0â.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BSCHB" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Check for sign of bitwise operation involving negative number"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Signed Check High Bit"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method compares a bitwise expression such as &lt;code&gt;((val &amp;amp; CONSTANT) &amp;gt; 0)&lt;/code&gt; where CONSTANT is the negative number. Using bit arithmetic and then comparing with the greater than operator can lead to unexpected results. This comparison is unlikely to work as expected. The good practice is to use â!= 0â instead of â&amp;gt; 0â.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BUACFTO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Primitive value is unboxed and coerced for ternary operator"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unboxed And Coerced For Ternary Operator"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A wrapped primitive value is unboxed and converted to another primitive type as part of the evaluation of a conditional ternary operator (the &lt;code&gt;b ? e1 : e2&lt;/code&gt; operator). The semantics of Java mandate that if &lt;code&gt;e1&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt; are wrapped numeric values, the values are unboxed and converted/coerced to their common type (e.g, if &lt;code&gt;e1&lt;/code&gt; is of type &lt;code&gt;Integer&lt;/code&gt; and &lt;code&gt;e2&lt;/code&gt; is of type &lt;code&gt;Float&lt;/code&gt;, then &lt;code&gt;e1&lt;/code&gt; is unboxed, converted to a floating point value, and boxed. See JLS Section 15.25.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BUC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Unchecked/unconfirmed cast"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unconfirmed Cast"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This cast is unchecked, and not all instances of the type casted from can be cast to the type it is being cast to. Check that your program logic ensures that this cast will not fail.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BUCORV" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Unchecked/unconfirmed cast of return value from method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unconfirmed Cast Of Return Value"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code performs an unchecked cast of the return value of a method. The code might be calling the method in such a way that the cast is guaranteed to be safe, but SpotBugs is unable to verify that the cast is safe. Check that your program logic ensures that this cast will not fail.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BUIR" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Boxed value is unboxed and then immediately reboxed"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unboxing Immediately Reboxed"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A boxed value is unboxed and then immediately reboxed.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BVI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "instanceof will always return true"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Vacuous Instanceof"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This instanceof test will always return true (unless the value being tested is null). Although this is safe, make sure it isnât an indication of some misunderstanding or some other logic error. If you really want to test the value for being null, perhaps it would be clearer to do better to do a null test rather than an instanceof test.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BWAP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Possible bad parsing of shift operation"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Wrong Add Priority"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code performs an operation like (x &amp;lt;&amp;lt; 8 + y). Although this might be correct, probably it was meant to perform (x &amp;lt;&amp;lt; 8) + y, but shift operation has a lower precedence, so itâs actually parsed as x &amp;lt;&amp;lt; (8 + y).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BcII" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "instanceof will always return false"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Impossible Instanceof"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This instanceof test will always return false. Although this is safe, make sure it isnât an indication of some misunderstanding or some other logic error.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Critical"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_BiI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Incompatible bit masks"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Ior"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method compares an expression of the form &lt;code&gt;(e | C)&lt;/code&gt; to D. which will always compare unequal due to the specific values of constants C and D. This may indicate a logic error or typo.&lt;/p&gt;&#x0A;&lt;p&gt;Typically, this bug occurs because the code wants to perform a membership test in a bit set, but uses the bitwise OR operator (â|â) instead of bitwise AND (â&amp;amp;â).&lt;/p&gt;&#x0A;&lt;p&gt;Also such bug may appear in expressions like &lt;code&gt;(e &amp;amp; A | B) == C&lt;/code&gt; which is parsed like &lt;code&gt;((e &amp;amp; A) | B) == C&lt;/code&gt; while &lt;code&gt;(e &amp;amp; (A | B)) == C&lt;/code&gt; was intended.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_CAS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Abstract class defines covariant compareTo() method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Abstract Self"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "This class defines a covariant version of `compareTo()`.Â  To correctly&#x0A;override the `compareTo()` method in the `Comparable` interface, the&#x0A;parameter of `compareTo()` must have type `java.lang.Object`.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_CCAES" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Possibly incompatible element is stored in covariant array"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Covariant Array Element Store"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "Value is stored into the array and the value type doesn&apos;t match the&#x0A;array type. It&apos;s known from the analysis that actual array type is&#x0A;narrower than the declared type of its variable or field and this&#x0A;assignment doesn&apos;t satisfy the original array type. This assignment may&#x0A;cause ArrayStoreException at runtime.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_CCAF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Covariant array assignment to a field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Covariant Array Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "Array of covariant type is assigned to a field. This is confusing and&#x0A;may lead to ArrayStoreException at runtime if the reference of some&#x0A;other type will be stored in this array later like in the following&#x0A;code:&#x0A;&#x0A;``` {.java}&#x0A;Number[] arr = new Integer[10];&#x0A;arr[0] = 1.0;&#x0A;```&#x0A;&#x0A;Consider changing the type of created array or the field type.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_CCAL" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Covariant array assignment to a local variable"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Covariant Array Local"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "Array of covariant type is assigned to a local variable. This is&#x0A;confusing and may lead to ArrayStoreException at runtime if the&#x0A;reference of some other type will be stored in this array later like in&#x0A;the following code:&#x0A;&#x0A;``` {.java}&#x0A;Number[] arr = new Integer[10];&#x0A;arr[0] = 1.0;&#x0A;```&#x0A;&#x0A;Consider changing the type of created array or the local variable type.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_CCAR" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Covariant array is returned from the method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Covariant Array Return"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "Array of covariant type is returned from the method. This is confusing&#x0A;and may lead to ArrayStoreException at runtime if the calling code will&#x0A;try to store the reference of some other type in the returned array.&#x0A;&#x0A;Consider changing the type of created array or the method return type.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_CCD" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Test for circular dependencies among classes"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Circular Dependency"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "This class has a circular dependency with other classes. This makes&#x0A;building these classes difficult, as each is dependent on the other to&#x0A;build correctly. Consider using interfaces to break the hard dependency.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_CCEWTA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Impossible downcast of toArray() result"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Impossible Downcast Of Toarray"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code is casting the result of calling &lt;code&gt;toArray()&lt;/code&gt; on a collection to a type more specific than &lt;code&gt;Object[]&lt;/code&gt;, as in:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String[] getAsArray(Collection&amp;lt;String&amp;gt; c) {&#x0A;    return (String[]) c.toArray();&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;This will usually fail by throwing a ClassCastException. The &lt;code&gt;toArray()&lt;/code&gt; of almost all collections return an &lt;code&gt;Object[]&lt;/code&gt;. They canât really do anything else, since the Collection object has no reference to the declared generic type of the collection.&lt;/p&gt;&#x0A;&lt;p&gt;The correct way to do get an array of a specific type from a collection is to use &lt;code&gt;c.toArray(new String[]);&lt;/code&gt; or &lt;code&gt;c.toArray(new String[c.size()]);&lt;/code&gt; (the latter is slightly more efficient).&lt;/p&gt;&#x0A;&lt;p&gt;There is one common/known exception to this. The &lt;code&gt;toArray()&lt;/code&gt; method of lists returned by &lt;code&gt;Arrays.asList(...)&lt;/code&gt; will return a covariantly typed array. For example, &lt;code&gt;Arrays.asArray(new String[] { &amp;quot;a&amp;quot; }).toArray()&lt;/code&gt; will return a &lt;code&gt;String []&lt;/code&gt;. SpotBugs attempts to detect and suppress such cases, but may miss some.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Critical"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_CCIF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "compareTo()/compare() incorrectly handles float or double value"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Compareto Incorrect Floating"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method compares double or float values using pattern like this: val1 &amp;gt; val2 ? 1 : val1 &amp;lt; val2 ? -1 : 0. This pattern works incorrectly for -0.0 and NaN values which may result in incorrect sorting result or broken collection (if compared values are used as keys). Consider using Double.compare or Float.compare static methods which handle all the special cases correctly.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_CCRMV" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "compareTo()/compare() returns Integer.MIN_VALUE"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Compareto Results Min Value"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;In some situation, this compareTo or compare method returns the constant Integer.MIN_VALUE, which is an exceptionally bad practice. The only thing that matters about the return value of compareTo is the sign of the result. But people will sometimes negate the return value of compareTo, expecting that this will negate the sign of the result. And it will, except in the case where the value returned is Integer.MIN_VALUE. So just return -1 rather than Integer.MIN_VALUE.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_CICBNC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class defines clone() but doesn&apos;t implement Cloneable"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Implements Clone But Not Cloneable"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines a clone() method but the class doesnât implement Cloneable. There are some situations in which this is OK (e.g., you want to control how subclasses can clone themselves), but just make sure that this is what you intended.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_CNC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class names should start with an upper case letter"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Class Naming Convention"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Class names should be nouns, in mixed case with the first letter of each internal word capitalized. Try to keep your class names simple and descriptive. Use whole words-avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_CRCV" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Rough value of known constant found"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Rough Constant Value"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Itâs recommended to use the predefined library constant for code clarity and better precision.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_CSNO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Covariant compareTo() method defined"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Self No Object"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "This class defines a covariant version of `compareTo()`.Â  To correctly&#x0A;override the `compareTo()` method in the `Comparable` interface, the&#x0A;parameter of `compareTo()` must have type `java.lang.Object`.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ClMMIC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class implements Cloneable but does not define or use clone method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Idiom"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Class implements Cloneable but does not define or use the clone method.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DAINVTR" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Can&apos;t use reflection to check for presence of annotation without runtime retention"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Annotation Is Not Visible To Reflection"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Unless an annotation has itself been annotated with &lt;span class=&quot;citation&quot; data-cites=&quot;Retention&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME), the annotation canât be observed using reflection (e.g., by using the isAnnotationPresent method). .&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DAWO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Reversed method arguments"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Arguments Wrong Order"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The arguments to this method call seem to be in the wrong order. For example, a call &lt;code&gt;Preconditions.checkNotNull(&amp;quot;message&amp;quot;, message)&lt;/code&gt; has reserved arguments: the value to be checked is the first argument.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DBC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method invokes inefficient Boolean constructor; use Boolean.valueOf(...) instead"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Boolean Ctor"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Creating new instances of &lt;code&gt;java.lang.Boolean&lt;/code&gt; wastes memory, since &lt;code&gt;Boolean&lt;/code&gt; objects are immutable and there are only two useful values of this type.Â  Use the &lt;code&gt;Boolean.valueOf()&lt;/code&gt; method (or Java 1.5 autoboxing) to create &lt;code&gt;Boolean&lt;/code&gt; objects instead.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DBM" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Bad constant value for month"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Month"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code passes a constant month value outside the expected range of 0..11 to a method.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DBMOU" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "The equals and hashCode methods of URL are blocking"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Blocking Methods On Url"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The equals and hashCode method of URL perform domain name resolution, this can result in a big performance hit. See &lt;a href=&quot;http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html&quot; class=&quot;uri&quot;&gt;http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html&lt;/a&gt; for more information. Consider using &lt;code&gt;java.net.URI&lt;/code&gt; instead.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DBPFC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Boxing a primitive to compare"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Boxed Primitive For Compare"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A boxed primitive is created just to call compareTo method. Itâs more efficient to use static compare method (for double and float since Java 1.4, for other primitive types since Java 1.7) which works on primitives directly.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DBPFP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Boxing/unboxing to parse a primitive"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Boxed Primitive For Parsing"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A boxed primitive is created from a String, just to extract the unboxed primitive value. It is more efficient to just call the static parseXXX method.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DBPT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method allocates a boxed primitive just to call toString"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Boxed Primitive Tostring"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A boxed primitive is allocated just to call toString(). It is more effective to just use the static form of toString which takes the primitive value. So,&lt;/p&gt;&#x0A;&lt;table&gt;&#x0A;&lt;thead&gt;&#x0A;&lt;tr class=&quot;header&quot;&gt;&#x0A;&lt;th style=&quot;text-align: left;&quot;&gt;Replaceâ¦&lt;/th&gt;&#x0A;&lt;th style=&quot;text-align: left;&quot;&gt;With thisâ¦&lt;/th&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;/thead&gt;&#x0A;&lt;tbody&gt;&#x0A;&lt;tr class=&quot;odd&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;new Integer(1).toString()&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;Integer.toString(1)&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;even&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;new Long(1).toString()&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;Long.toString(1)&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;odd&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;new Float(1.0).toString()&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;Float.toString(1.0)&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;even&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;new Double(1.0).toString()&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;Double.toString(1.0)&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;odd&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;new Byte(1).toString()&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;Byte.toString(1)&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;even&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;new Short(1).toString()&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;Short.toString(1)&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;odd&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;new Boolean(true).toString()&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;Boolean.toString(true)&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;/tbody&gt;&#x0A;&lt;/table&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DCCIDP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Classloaders should only be created inside doPrivileged block"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Create Classloader Inside Do Privileged"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code creates a classloader, which needs permission if a security manage is installed. If this code might be invoked by code that does not have security permissions, then the classloader creation needs to occur inside a doPrivileged block.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DCDP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Hardcoded constant database password"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Constant Db Password"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code creates a database connect using a hardcoded, constant password. Anyone with access to either the source code or the compiled code can easily learn the password.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DCL" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Possible double check of field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Doublecheck"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method may contain an instance of double-checked locking.Â  This idiom is not correct according to the semantics of the Java memory model.Â  For more information, see the web page &lt;a href=&quot;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&quot; class=&quot;uri&quot;&gt;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&lt;/a&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DCNFH" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "hasNext method invokes next"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Calling Next From Hasnext"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The hasNext() method invokes the next() method. This is almost certainly wrong, since the hasNext() method is not supposed to change the state of the iterator, and the next method is supposed to change the state of the iterator.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DCOU" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Maps and sets of URLs can be performance hogs"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Collection Of Urls"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method or field is or uses a Map or Set of URLs. Since both the equals and hashCode method of URL perform domain name resolution, this can result in a big performance hit. See &lt;a href=&quot;http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html&quot; class=&quot;uri&quot;&gt;http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html&lt;/a&gt; for more information. Consider using &lt;code&gt;java.net.URI&lt;/code&gt; instead.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DCSNCT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Collections should not contain themselves"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Collections Should Not Contain Themselves"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This call to a generic collectionâs method would only make sense if a collection contained itself (e.g., if &lt;code&gt;s.contains(s)&lt;/code&gt; were true). This is unlikely to be true and would cause problems if it were true (such as the computation of the hash code resulting in infinite recursion). It is likely that the wrong value is being passed as a parameter.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DCTR" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Invokes run on a thread (did you mean to start it instead?)"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Invoke Run"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method explicitly invokes &lt;code&gt;run()&lt;/code&gt; on an object.Â  In general, classes implement the &lt;code&gt;Runnable&lt;/code&gt; interface because they are going to have their &lt;code&gt;run()&lt;/code&gt; method invoked in a new thread, in which case &lt;code&gt;Thread.start()&lt;/code&gt; is the right method to call.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DDB" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method uses the same code for two branches"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Duplicate Branches"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method uses the same code to implement two branches of a conditional branch. Check to ensure that this isnât a coding mistake.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DDE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Reliance on default encoding"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Default Encoding"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Found a call to a method which will perform a byte to String (or String to byte) conversion, and will assume that the default platform encoding is suitable. This will cause the application behaviour to vary between platforms. Use an alternative API and specify a charset name or Charset object explicitly.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DDIDP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method invoked that should be only be invoked inside a doPrivileged block"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Do Inside Do Privileged"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code invokes a method that requires a security permission check. If this code will be granted security permissions, but might be invoked by code that does not have security permissions, then the invocation needs to occur inside a doPrivileged block.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DDLS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Dead store to local variable"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Dead Local Store"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This instruction assigns a value to a local variable, but the value is not read or used in any subsequent instruction. Often, this indicates an error, because the value computed is never used.&lt;/p&gt;&#x0A;&lt;p&gt;Note that Sunâs javac compiler often generates dead stores for final local variables. Because SpotBugs is a bytecode-based tool, there is no easy way to eliminate these false positives.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DDLSIR" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Useless assignment in return statement"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Dead Local Store In Return"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This statement assigns to a local variable in a return statement. This assignment has effect. Please verify that this statement does the right thing.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DDLSON" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Dead store of null to local variable"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Dead Local Store Of Null"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code stores null into a local variable, and the stored value is not read. This store may have been introduced to assist the garbage collector, but as of Java SE 6.0, this is no longer needed or useful.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DDLSSF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Dead store to local variable that shadows field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Dead Local Store Shadows Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This instruction assigns a value to a local variable, but the value is not read or used in any subsequent instruction. Often, this indicates an error, because the value computed is never used. There is a field with the same name as the local variable. Did you mean to assign to that variable instead?&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DDSC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method uses the same code for two switch clauses"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Duplicate Switch Clauses"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method uses the same code to implement two clauses of a switch statement. This could be a case of duplicate code, but it might also indicate a coding mistake.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DDSOCL" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Dead store of class literal"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Dead Store Of Class Literal"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This instruction assigns a class literal to a variable and then never uses it. &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/compatibility-137462.html#literal&quot;&gt;The behavior of this differs in Java 1.4 and in Java 5.&lt;/a&gt; In Java 1.4 and earlier, a reference to &lt;code&gt;Foo.class&lt;/code&gt; would force the static initializer for &lt;code&gt;Foo&lt;/code&gt; to be executed, if it has not been executed already. In Java 5 and later, it does not.&lt;/p&gt;&#x0A;&lt;p&gt;See Sunâs &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/compatibility-137462.html#literal&quot;&gt;article on Java SE compatibility&lt;/a&gt; for more details and examples, and suggestions on how to force class initialization in Java 5.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DEDP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Empty database password"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Empty Db Password"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code creates a database connect using a blank or empty password. This indicates that the database is not protected by a password.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DESMREO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Adding elements of an entry set may fail due to reuse of Entry objects"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Entry Sets May Reuse Entry Objects"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The entrySet() method is allowed to return a view of the underlying Map in which a single Entry object is reused and returned during the iteration. As of Java 1.6, both IdentityHashMap and EnumMap did so. When iterating through such a Map, the Entry value is only valid until you advance to the next iteration. If, for example, you try to pass such an entrySet to an addAll method, things will go badly wrong.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DFATCMSOSTPE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Futile attempt to change max pool size of ScheduledThreadPoolExecutor"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Futile Attempt To Change Maxpool Size Of Scheduled Thread Pool Executor"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;(&lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html&quot;&gt;Javadoc&lt;/a&gt;) While ScheduledThreadPoolExecutor inherits from ThreadPoolExecutor, a few of the inherited tuning methods are not useful for it. In particular, because it acts as a fixed-sized pool using corePoolSize threads and an unbounded queue, adjustments to maximumPoolSize have no useful effect.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DFNC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method invokes inefficient floating-point Number constructor; use static valueOf instead"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Fp Number Ctor"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Using &lt;code&gt;new Double(double)&lt;/code&gt; is guaranteed to always result in a new object whereas &lt;code&gt;Double.valueOf(double)&lt;/code&gt; allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster.&lt;/p&gt;&#x0A;&lt;p&gt;Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the &lt;code&gt;valueOf()&lt;/code&gt; method when creating instances of &lt;code&gt;Double&lt;/code&gt; and &lt;code&gt;Float&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DHAF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Code contains a hard coded reference to an absolute pathname"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Hardcoded Absolute Filename"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code constructs a File object using a hard coded to an absolute pathname (e.g., &lt;code&gt;new File(&amp;quot;/home/dannyc/workspace/j2ee/src/share/com/sun/enterprise/deployment&amp;quot;);&lt;/code&gt;&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DIHOA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Invocation of hashCode on an array"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Invoking Hashcode On Array"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code invokes hashCode on an array. Calling hashCode on an array returns the same value as System.identityHashCode, and ignores the contents and length of the array. If you need a hashCode that depends on the contents of an array &lt;code&gt;a&lt;/code&gt;, use &lt;code&gt;java.util.Arrays.hashCode(a)&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DIMM" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Incorrect combination of Math.max and Math.min"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Invalid Min Max"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code tries to limit the value bounds using the construct like Math.min(0, Math.max(100, value)). However the order of the constants is incorrect: it should be Math.min(100, Math.max(0, value)). As the result this code always produces the same result (or NaN if the value is NaN).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DITOA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Invocation of toString on an array"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Invoking Tostring On Array"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code invokes toString on an array, which will generate a fairly useless result such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DITOAA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Invocation of toString on an unnamed array"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Invoking Tostring On Anonymous Array"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code invokes toString on an (anonymous) array. Calling toString on an array generates a fairly useless result such as [C@16f0472. Consider using Arrays.toString to convert the array into a readable String that gives the contents of the array. See Programming Puzzlers, chapter 3, puzzle 12.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DLBTDIOI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Double.longBitsToDouble invoked on an int"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Long Bits To Double Invoked On Int"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The Double.longBitsToDouble method is invoked, but a 32 bit int value is passed as an argument. This almost certainly is not intended and is unlikely to give the intended result.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DLNLISS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Switch statement found where default case is missing"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Switch No Default"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains a switch statement where default case is missing. Usually you need to provide a default case.&lt;/p&gt;&#x0A;&lt;p&gt;Because the analysis only looks at the generated bytecode, this warning can be incorrect triggered if the default case is at the end of the switch statement and the switch statement doesnât contain break statements for other cases.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DMD" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method might drop exception"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Might Drop"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method might drop an exception.Â  In general, exceptions should be handled or reported in some way, or they should be thrown out of the method.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DMI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method might ignore exception"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Might Ignore"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method might ignore an exception.Â  In general, exceptions should be handled or reported in some way, or they should be thrown out of the method.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DMWOC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Monitor wait() called on Condition"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Monitor Wait On Condition"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method calls &lt;code&gt;wait()&lt;/code&gt; on a &lt;code&gt;java.util.concurrent.locks.Condition&lt;/code&gt; object.Â  Waiting for a &lt;code&gt;Condition&lt;/code&gt; should be done using one of the &lt;code&gt;await()&lt;/code&gt; methods defined by the &lt;code&gt;Condition&lt;/code&gt; interface.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DNCGCE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Explicit garbage collection; extremely dubious except in benchmarking code"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Gc"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Code explicitly invokes garbage collection. Except for specific use in benchmarking, this is very dubious.&lt;/p&gt;&#x0A;&lt;p&gt;In the past, situations where people have explicitly invoked the garbage collector in routines such as close or finalize methods has led to huge performance black holes. Garbage collection can be expensive. Any situation that forces hundreds or thousands of garbage collections will bring the machine to a crawl.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DNCSE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method invokes System.exit(...)"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Exit"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Invoking System.exit shuts down the entire Java virtual machine. This should only been done when it is appropriate. Such calls make it hard or impossible for your code to be invoked by other code. Consider throwing a RuntimeException instead.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DNOW" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Non serializable object written to ObjectOutput"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Nonserializable Object Written"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code seems to be passing a non-serializable object to the ObjectOutput.writeObject method. If the object is, indeed, non-serializable, an error will result.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DNUT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Thread passed where Runnable expected"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Thread Passed Where Runnable Expected"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A Thread object is passed as a parameter to a method where a Runnable is expected. This is rather unusual, and may indicate a logic error or cause unexpected behavior.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DNVN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Use the nextInt method of Random rather than nextDouble to generate a random integer"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Nextint Via Nextdouble"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;If &lt;code&gt;r&lt;/code&gt; is a &lt;code&gt;java.util.Random&lt;/code&gt;, you can generate a random number from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;n-1&lt;/code&gt; using &lt;code&gt;r.nextInt(n)&lt;/code&gt;, rather than using &lt;code&gt;(int)(r.nextDouble() * n)&lt;/code&gt;.&lt;/p&gt;&#x0A;&lt;p&gt;The argument to nextInt must be positive. If, for example, you want to generate a random value from -99 to 0, use &lt;code&gt;-r.nextInt(100)&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DOI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Overwritten increment"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Overwritten Increment"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code performs an increment operation (e.g., &lt;code&gt;i++&lt;/code&gt;) and then immediately overwrites it. For example, &lt;code&gt;i = i++&lt;/code&gt; immediately overwrites the incremented value with the original value.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DPC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Possible exposure of partially initialized object"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Partially Constructed"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Looks like this method uses lazy field initialization with double-checked locking. While the field is correctly declared as volatile, itâs possible that the internal structure of the object is changed after the field assignment, thus another thread may see the partially initialized object.&lt;/p&gt;&#x0A;&lt;p&gt;To fix this problem consider storing the object into the local variable first and save it to the volatile field only after itâs fully constructed.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DRFOE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method invokes dangerous method runFinalizersOnExit"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Run Finalizers On Exit"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;&lt;em&gt;Never call System.runFinalizersOnExit or Runtime.runFinalizersOnExit for any reason: they are among the most dangerous methods in the Java libraries.&lt;/em&gt; â Joshua Bloch&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DRUOO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Random object created and used only once"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Random Used Only Once"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code creates a java.util.Random object, uses it to generate one random number, and then discards the Random object. This produces mediocre quality random numbers and is inefficient. If possible, rewrite the code so that the Random object is created once and saved, and each time a new random number is required invoke a method on the existing Random object to obtain it.&lt;/p&gt;&#x0A;&lt;p&gt;If it is important that the generated Random numbers not be guessable, you &lt;em&gt;must&lt;/em&gt; not create a new Random for each random number; the values are too easily guessable. You should strongly consider using a java.security.SecureRandom instead (and avoid allocating a new SecureRandom for each random number needed).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DSC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method invokes inefficient new String(String) constructor"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "String Ctor"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Using the &lt;code&gt;java.lang.String(String)&lt;/code&gt; constructor wastes memory because the object so constructed will be functionally indistinguishable from the &lt;code&gt;String&lt;/code&gt; passed as a parameter.Â  Just use the argument &lt;code&gt;String&lt;/code&gt; directly.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DSOB" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Synchronization on Boolean"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Synchronization On Boolean"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code synchronizes on a boxed primitive constant, such as a Boolean.&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private static Boolean inited = Boolean.FALSE;&#x0A;...&#x0A;synchronized(inited) {&#x0A;    if (!inited) {&#x0A;        init();&#x0A;        inited = Boolean.TRUE;&#x0A;    }&#x0A;}&#x0A;...&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Since there normally exist only two Boolean objects, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness and possible deadlock.&lt;/p&gt;&#x0A;&lt;p&gt;See CERT &lt;a href=&quot;https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused&quot;&gt;CON08-J. Do not synchronize on objects that may be reused&lt;/a&gt; for more information.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DSOBP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Synchronization on boxed primitive"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Synchronization On Boxed Primitive"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code synchronizes on a boxed primitive constant, such as an Integer.&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private static Integer count = 0;&#x0A;...&#x0A;synchronized(count) {&#x0A;    count++;&#x0A;}&#x0A;...&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Since Integer objects can be cached and shared, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness and possible deadlock.&lt;/p&gt;&#x0A;&lt;p&gt;See CERT &lt;a href=&quot;https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused&quot;&gt;CON08-J. Do not synchronize on objects that may be reused&lt;/a&gt; for more information.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DSOSC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Synchronization on interned String"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Synchronization On Shared Constant"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code synchronizes on interned String.&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private static String LOCK = &amp;quot;LOCK&amp;quot;;&#x0A;...&#x0A;synchronized(LOCK) {&#x0A;    ...&#x0A;}&#x0A;...&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Constant Strings are interned and shared across all other classes loaded by the JVM. Thus, this code is locking on something that other code might also be locking. This could result in very strange and hard to diagnose blocking and deadlock behavior. See &lt;a href=&quot;http://www.javalobby.org/java/forums/t96352.html&quot; class=&quot;uri&quot;&gt;http://www.javalobby.org/java/forums/t96352.html&lt;/a&gt; and &lt;a href=&quot;http://jira.codehaus.org/browse/JETTY-352&quot; class=&quot;uri&quot;&gt;http://jira.codehaus.org/browse/JETTY-352&lt;/a&gt;.&lt;/p&gt;&#x0A;&lt;p&gt;See CERT &lt;a href=&quot;https://www.securecoding.cert.org/confluence/display/java/CON08-J.+Do+not+synchronize+on+objects+that+may+be+reused&quot;&gt;CON08-J. Do not synchronize on objects that may be reused&lt;/a&gt; for more information.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DSOUBP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Synchronization on boxed primitive values"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Synchronization On Unshared Boxed Primitive"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code synchronizes on an apparently unshared boxed primitive, such as an Integer.&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private static final Integer fileLock = new Integer(1);&#x0A;...&#x0A;synchronized(fileLock) {&#x0A;    .. do something ..&#x0A;}&#x0A;...&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;It would be much better, in this code, to redeclare fileLock as&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private static final Object fileLock = new Object();&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;The existing code might be OK, but it is confusing and a future refactoring, such as the âRemove Boxingâ refactoring in IntelliJ, might replace this with the use of an interned Integer object shared throughout the JVM, leading to very confusing behavior and potential deadlock.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DSTPEWZCT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Creation of ScheduledThreadPoolExecutor with zero core threads"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Scheduled Thread Pool Executor With Zero Core Threads"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;(&lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledThreadPoolExecutor.html#ScheduledThreadPoolExecutor%28int%29&quot;&gt;Javadoc&lt;/a&gt;) A ScheduledThreadPoolExecutor with zero core threads will never execute anything; changes to the max pool size are ignored.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DSVC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method invokes inefficient new String() constructor"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "String Void Ctor"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Creating a new &lt;code&gt;java.lang.String&lt;/code&gt; object using the no-argument constructor wastes memory because the object so created will be functionally indistinguishable from the empty string constant &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;.Â  Java guarantees that identical string constants will be represented by the same &lt;code&gt;String&lt;/code&gt; object.Â  Therefore, you should just use the empty string constant directly.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DUM" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Call to unsupported method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unsupported Method"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;All targets of this method invocation throw an UnsupportedOperationException.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DURTCC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Don&apos;t use removeAll to clear a collection"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Using Removeall To Clear Collection"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;If you want to remove all elements from a collection &lt;code&gt;c&lt;/code&gt;, use &lt;code&gt;c.clear&lt;/code&gt;, not &lt;code&gt;c.removeAll(c)&lt;/code&gt;. Calling &lt;code&gt;c.removeAll(c)&lt;/code&gt; to clear a collection is less clear, susceptible to errors from typos, less efficient and for some collections, might throw a &lt;code&gt;ConcurrentModificationException&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DUS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Invocation of substring(0), which returns the original value"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Useless Substring"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code invokes substring(0) on a String, which returns the original value.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DUT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "A thread was created using the default empty run method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Useless Thread"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method creates a thread without specifying a run method either by deriving from the Thread class, or by passing a Runnable object. This thread, then, does nothing but waste time.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DVCTEM" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Useless/vacuous call to EasyMock method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Vacuous Call To Easymock Method"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This call doesnât pass any objects to the EasyMock method, so the call doesnât do anything.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DVSCC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Vacuous call to collections"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Vacuous Self Collection Call"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This call doesnât make sense. For any collection &lt;code&gt;c&lt;/code&gt;, calling &lt;code&gt;c.containsAll(c)&lt;/code&gt; should always be true, and &lt;code&gt;c.retainAll(c)&lt;/code&gt; should have no effect.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_DmD" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "D&apos;oh! A nonsensical method invocation"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Doh"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This partical method invocation doesnât make sense, for reasons that should be apparent from inspection.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EAAN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "equals() used to compare array and nonarray"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Array And Nonarray"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method invokes the .equals(Object o) to compare an array and a reference that doesnât seem to be an array. If things being compared are of different types, they are guaranteed to be unequal and the comparison is almost certainly an error. Even if they are both arrays, the equals method on arrays only determines of the two arrays are the same object. To compare the contents of the arrays, use java.util.Arrays.equals(Object[], Object[]).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EAF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "equals method always returns false"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Always False"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines an equals method that always returns false. This means that an object is not equal to itself, and it is impossible to create useful Maps or Sets of this class. More fundamentally, it means that equals is not reflexive, one of the requirements of the equals method.&lt;/p&gt;&#x0A;&lt;p&gt;The likely intended semantics are object identity: that an object is equal to itself. This is the behavior inherited from class &lt;code&gt;Object&lt;/code&gt;. If you need to override an equals inherited from a different superclass, you can use:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean equals(Object o) {&#x0A;    return this == o;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EAS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Abstract class defines covariant equals() method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Abstract Self"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines a covariant version of &lt;code&gt;equals()&lt;/code&gt;.Â  To correctly override the &lt;code&gt;equals()&lt;/code&gt; method in &lt;code&gt;java.lang.Object&lt;/code&gt;, the parameter of &lt;code&gt;equals()&lt;/code&gt; must have type &lt;code&gt;java.lang.Object&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EAT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "equals method always returns true"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Always True"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines an equals method that always returns true. This is imaginative, but not very smart. Plus, it means that the equals method is not symmetric.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EBAC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Invocation of equals() on an array, which is equivalent to =="/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Array Compare"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method invokes the .equals(Object o) method on an array. Since arrays do not override the equals method of Object, calling equals on an array is the same as comparing their addresses. To compare the contents of the arrays, use &lt;code&gt;java.util.Arrays.equals(Object[], Object[])&lt;/code&gt;. To compare the addresses of the arrays, it would be less confusing to explicitly check pointer equality using &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ECCN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "equals method compares class names rather than class objects"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Comparing Class Names"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method checks to see if two objects are the same class by checking to see if the names of their classes are equal. You can have different classes with the same name if they are loaded by different class loaders. Just check to see if the class objects are the same.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ECFONCWT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Equals checks for incompatible operand"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Check For Operand Not Compatible With This"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This equals method is checking to see if the argument is some incompatible type (i.e., a class that is neither a supertype nor subtype of the class that defines the equals method). For example, the Foo class might have an equals method that looks like:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean equals(Object o) {&#x0A;    if (o instanceof Foo)&#x0A;        return name.equals(((Foo)o).name);&#x0A;    else if (o instanceof String)&#x0A;        return name.equals(o);&#x0A;    else return false;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;This is considered bad practice, as it makes it very hard to implement an equals method that is symmetric and transitive. Without those properties, very unexpected behaviors are possible.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ECPSWE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Comparison of String parameter using == or !="/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Comparing Parameter String With Eq"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code compares a &lt;code&gt;java.lang.String&lt;/code&gt; parameter for reference equality using the == or != operators. Requiring callers to pass only String constants or interned strings to a method is unnecessarily fragile, and rarely leads to measurable performance gains. Consider using the &lt;code&gt;equals(Object)&lt;/code&gt; method instead.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ECSWE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Comparison of String objects using == or !="/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Comparing Strings With Eq"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code compares &lt;code&gt;java.lang.String&lt;/code&gt; objects for reference equality using the == or != operators. Unless both strings are either constants in a source file, or have been interned using the &lt;code&gt;String.intern()&lt;/code&gt; method, the same string value may be represented by two different String objects. Consider using the &lt;code&gt;equals(Object)&lt;/code&gt; method instead.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ECUOE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class defines compareTo(...) and uses Object.equals()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Compareto Use Object Equals"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines a &lt;code&gt;compareTo(...)&lt;/code&gt; method but inherits its &lt;code&gt;equals()&lt;/code&gt; method from &lt;code&gt;java.lang.Object&lt;/code&gt;. Generally, the value of compareTo should return zero if and only if equals returns true. If this is violated, weird and unpredictable failures will occur in classes such as PriorityQueue. In Java 5 the PriorityQueue.remove method uses the compareTo method, while in Java 6 it uses the equals method.&lt;/p&gt;&#x0A;&lt;p&gt;From the JavaDoc for the compareTo method in the Comparable interface:&lt;/p&gt;&#x0A;&lt;blockquote&gt;&#x0A;&lt;p&gt;It is strongly recommended, but not strictly required that &lt;code&gt;(x.compareTo(y)==0) == (x.equals(y))&lt;/code&gt;. Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact. The recommended language is âNote: this class has a natural ordering that is inconsistent with equals.â&lt;/p&gt;&#x0A;&lt;/blockquote&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EDDEFE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Covariant equals() method defined for enum"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Dont Define Equals For Enum"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines an enumeration, and equality on enumerations are defined using object identity. Defining a covariant equals method for an enumeration value is exceptionally bad practice, since it would likely result in having two different enumeration values that compare as equals using the covariant enum method, and as not equal when compared normally. Donât do it.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EDOE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class doesn&apos;t override equals in superclass"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Doesnt Override Equals"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class extends a class that defines an equals method and adds fields, but doesnât define an equals method itself. Thus, equality on instances of this class will ignore the identity of the subclass and the added fields. Be sure this is what is intended, and that you donât need to override the equals method. Even if you donât need to override the equals method, consider overriding it anyway to document the fact that the equals method for the subclass just return the result of invoking super.equals(o).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EER" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "May expose internal representation by returning reference to mutable object"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Expose Rep"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "Returning a reference to a mutable object value stored in one of the&#x0A;object&apos;s fields exposes the internal representation of the object.Â  If&#x0A;instances are accessed by untrusted code, and unchecked changes to the&#x0A;mutable object would compromise security or other important properties,&#x0A;you will need to do something different. Returning a new copy of the&#x0A;object is better approach in many situations.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EESR" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "May expose internal static state by storing a mutable object into a static field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Expose Static Rep2"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code stores a reference to an externally mutable object into a static field. If unchecked changes to the mutable object would compromise security or other important properties, you will need to do something different. Storing a copy of the object is better approach in many situations.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Empty finalizer should be deleted"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Empty"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Empty &lt;code&gt;finalize()&lt;/code&gt; methods are useless, so they should be deleted.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EGACC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "equals method fails for subtypes"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Getclass And Class Constant"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class has an equals method that will be broken if it is inherited by subclasses. It compares a class literal with the class of the argument (e.g., in class &lt;code&gt;Foo&lt;/code&gt; it might check if &lt;code&gt;Foo.class == o.getClass()&lt;/code&gt;). It is better to check if &lt;code&gt;this.getClass() == o.getClass()&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EIAC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "equals(...) used to compare incompatible arrays"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Incompatible Array Compare"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method invokes the .equals(Object o) to compare two arrays, but the arrays of of incompatible types (e.g., String[] and StringBuffer[], or String[] and int[]). They will never be equal. In addition, when equals(â¦) is used to compare arrays it only checks to see if they are the same array, and ignores the contents of the arrays.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ENA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Call to equals(null)"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Null Arg"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method calls equals(Object), passing a null value as the argument. According to the contract of the equals() method, this call should always return &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EOENS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "equals method overrides equals in superclass and may not be symmetric"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Overriding Equals Not Symmetric"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines an equals method that overrides an equals method in a superclass. Both equals methods use &lt;code&gt;instanceof&lt;/code&gt; in the determination of whether two objects are equal. This is fraught with peril, since it is important that the equals method is symmetrical (in other words, &lt;code&gt;a.equals(b) == b.equals(a)&lt;/code&gt;). If B is a subtype of A, and Aâs equals method checks that the argument is an instanceof A, and Bâs equals method checks that the argument is an instanceof B, it is quite likely that the equivalence relation defined by these methods is not symmetric.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EONO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "equals() method defined that doesn&apos;t override equals(Object)"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Other No Object"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines an &lt;code&gt;equals()&lt;/code&gt; method, that doesnât override the normal &lt;code&gt;equals(Object)&lt;/code&gt; method defined in the base &lt;code&gt;java.lang.Object&lt;/code&gt; class.Â  Instead, it inherits an &lt;code&gt;equals(Object)&lt;/code&gt; method from a superclass. The class should probably define a &lt;code&gt;boolean equals(Object)&lt;/code&gt; method.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EOUO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "equals() method defined that doesn&apos;t override Object.equals(Object)"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Other Use Object"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines an &lt;code&gt;equals()&lt;/code&gt; method, that doesnât override the normal &lt;code&gt;equals(Object)&lt;/code&gt; method defined in the base &lt;code&gt;java.lang.Object&lt;/code&gt; class.Â  The class should probably define a &lt;code&gt;boolean equals(Object)&lt;/code&gt; method.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ESB" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Empty synchronized block"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Empty Sync"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code contains an empty synchronized block:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;synchronized() {&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Empty synchronized blocks are far more subtle and hard to use correctly than most people recognize, and empty synchronized blocks are almost never a better solution than less contrived solutions.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ESNO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Covariant equals() method defined"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Self No Object"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines a covariant version of &lt;code&gt;equals()&lt;/code&gt;.Â  To correctly override the &lt;code&gt;equals()&lt;/code&gt; method in &lt;code&gt;java.lang.Object&lt;/code&gt;, the parameter of &lt;code&gt;equals()&lt;/code&gt; must have type &lt;code&gt;java.lang.Object&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ESUO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Covariant equals() method defined, Object.equals(Object) inherited"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Self Use Object"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines a covariant version of the &lt;code&gt;equals()&lt;/code&gt; method, but inherits the normal &lt;code&gt;equals(Object)&lt;/code&gt; method defined in the base &lt;code&gt;java.lang.Object&lt;/code&gt; class.Â  The class should probably define a &lt;code&gt;boolean equals(Object)&lt;/code&gt; method.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EU" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Unusual equals method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unusual"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class doesnât do any of the patterns we recognize for checking that the type of the argument is compatible with the type of the &lt;code&gt;this&lt;/code&gt; object. There might not be anything wrong with this code, but it is worth reviewing.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EUCAI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Call to equals() comparing unrelated class and interface"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unrelated Class And Interface"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method calls equals(Object) on two references, one of which is a class and the other an interface, where neither the class nor any of its non-abstract subclasses implement the interface. Therefore, the objects being compared are unlikely to be members of the same class at runtime (unless some application classes were not analyzed, or dynamic class loading can occur at runtime). According to the contract of equals(), objects of different classes should always compare as unequal; therefore, according to the contract defined by java.lang.Object.equals(Object), the result of this comparison will always be false at runtime.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EUI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Call to equals() comparing different interface types"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unrelated Interfaces"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method calls equals(Object) on two references of unrelated interface types, where neither is a subtype of the other, and there are no known non-abstract classes which implement both interfaces. Therefore, the objects being compared are unlikely to be members of the same class at runtime (unless some application classes were not analyzed, or dynamic class loading can occur at runtime). According to the contract of equals(), objects of different classes should always compare as unequal; therefore, according to the contract defined by java.lang.Object.equals(Object), the result of this comparison will always be false at runtime.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EUT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Call to equals() comparing different types"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unrelated Types"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "This method calls equals(Object) on two references of different class&#x0A;types and analysis suggests they will be to objects of different classes&#x0A;at runtime. Further, examination of the equals methods that would be&#x0A;invoked suggest that either this call will always return false, or else&#x0A;the equals method is not be symmetric (which is a property required by&#x0A;the contract for equals in class Object).&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EUTUPE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Using pointer equality to compare different types"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unrelated Types Using Pointer Equality"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method uses pointer equality to compare two references that seem to be of different types. The result of this comparison will always be false at runtime.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_EiER" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "May expose internal representation by incorporating reference to mutable object"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Expose Rep2"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code stores a reference to an externally mutable object into the internal representation of the object.Â  If instances are accessed by untrusted code, and unchecked changes to the mutable object would compromise security or other important properties, you will need to do something different. Storing a copy of the object is better approach in many situations.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_FDNCSF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Finalizer does not call superclass finalizer"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Missing Super Call"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This &lt;code&gt;finalize()&lt;/code&gt; method does not make a call to its superclassâs &lt;code&gt;finalize()&lt;/code&gt; method.Â  So, any finalizer actions defined for the superclass will not be performed.Â  Add a call to &lt;code&gt;super.finalize()&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_FFNF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Finalizer nulls fields"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Finalizer Nulls Fields"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This finalizer nulls out fields. This is usually an error, as it does not aid garbage collection, and the object is going to be garbage collected anyway.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_FFONF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Finalizer only nulls fields"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Finalizer Only Nulls Fields"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This finalizer does nothing except null out fields. This is completely pointless, and requires that the object be garbage collected, finalized, and then garbage collected again. You should just remove the finalize method.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_FFPE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Test for floating point equality"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Floating Point Equality"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This operation compares two floating point values for equality. Because floating point calculations may involve rounding, calculated float and double values may not be accurate. For values that must be precise, such as monetary values, consider using a fixed-precision type such as BigDecimal. For values that need not be precise, consider comparing for equality within some range, for example: &lt;code&gt;if ( Math.abs(x - y) &amp;lt; .0000001 )&lt;/code&gt;. See the Java Language Specification, section 4.2.4.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_FMEW" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Missing expected or desired warning from SpotBugs"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Missing Expected Warning"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;SpotBugs didnât generate generated a warning that, according to a &lt;span class=&quot;citation&quot; data-cites=&quot;ExpectedWarning&quot;&gt;@ExpectedWarning&lt;/span&gt; annotated, is expected or desired.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_FMUFP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method performs math using floating point precision"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Math Using Float Precision"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The method performs math operations using floating point precision. Floating point precision is very imprecise. For example, 16777216.0f + 1.0f = 16777216.0f. Consider using double math instead.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_FNS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Finalizer nullifies superclass finalizer"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Nullify Super"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This empty &lt;code&gt;finalize()&lt;/code&gt; method explicitly negates the effect of any finalizer defined by its superclass.Â  Any finalizer actions defined for the superclass will not be performed.Â  Unless this is intended, delete this method.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_FSBP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Finalizer should be protected, not public"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Public Should Be Protected"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A classâs &lt;code&gt;finalize()&lt;/code&gt; method should have protected access, not public.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_FU" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Finalizer does nothing but call superclass finalizer"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Useless"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The only thing this &lt;code&gt;finalize()&lt;/code&gt; method does is call the superclassâs &lt;code&gt;finalize()&lt;/code&gt; method, making it redundant.Â  Delete it.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_FUW" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Unexpected/undesired warning from SpotBugs"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unexpected Warning"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;SpotBugs generated a warning that, according to a &lt;span class=&quot;citation&quot; data-cites=&quot;NoWarning&quot;&gt;@NoWarning&lt;/span&gt; annotated, is unexpected or undesired.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_GUT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "No relationship between generic parameter and method argument"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unrelated Types"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This call to a generic collection method contains an argument with an incompatible class from that of the collectionâs parameter (i.e., the type of the argument is neither a supertype nor a subtype of the corresponding generic type argument). Therefore, it is unlikely that the collection contains any objects that are equal to the method argument used here. Most likely, the wrong value is being passed to the method.&lt;/p&gt;&#x0A;&lt;p&gt;In general, instances of two unrelated classes are not equal. For example, if the &lt;code&gt;Foo&lt;/code&gt; and &lt;code&gt;Bar&lt;/code&gt; classes are not related by subtyping, then an instance of &lt;code&gt;Foo&lt;/code&gt; should not be equal to an instance of &lt;code&gt;Bar&lt;/code&gt;. Among other issues, doing so will likely result in an equals method that is not symmetrical. For example, if you define the &lt;code&gt;Foo&lt;/code&gt; class so that a &lt;code&gt;Foo&lt;/code&gt; can be equal to a &lt;code&gt;String&lt;/code&gt;, your equals method isnât symmetrical since a &lt;code&gt;String&lt;/code&gt; can only be equal to a &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;&#x0A;&lt;p&gt;In rare cases, people do define nonsymmetrical equals methods and still manage to make their code work. Although none of the APIs document or guarantee it, it is typically the case that if you check if a &lt;code&gt;Collection&amp;lt;String&amp;gt;&lt;/code&gt; contains a &lt;code&gt;Foo&lt;/code&gt;, the equals method of argument (e.g., the equals method of the &lt;code&gt;Foo&lt;/code&gt; class) used to perform the equality checks.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_GUTIGC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Unchecked type in generic call"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unchecked Type In Generic Call"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This call to a generic collection method passes an argument while compile type Object where a specific type from the generic type parameters is expected. Thus, neither the standard Java type system nor static analysis can provide useful information on whether the object being passed as a parameter is of an appropriate type.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_HENH" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class defines equals() but not hashCode()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Equals No Hashcode"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class overrides &lt;code&gt;equals(Object)&lt;/code&gt;, but does not override &lt;code&gt;hashCode()&lt;/code&gt;.Â  Therefore, the class may violate the invariant that equal objects must have equal hashcodes.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_HEUH" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class defines equals() and uses Object.hashCode()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Equals Use Hashcode"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class overrides &lt;code&gt;equals(Object)&lt;/code&gt;, but does not override &lt;code&gt;hashCode()&lt;/code&gt;, and inherits the implementation of &lt;code&gt;hashCode()&lt;/code&gt; from &lt;code&gt;java.lang.Object&lt;/code&gt; (which returns the identity hash code, an arbitrary value assigned to the object by the VM).Â  Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes.&lt;/p&gt;&#x0A;&lt;p&gt;If you donât think instances of this class will ever be inserted into a HashMap/HashTable, the recommended &lt;code&gt;hashCode&lt;/code&gt; implementation to use is:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public int hashCode() {&#x0A;    assert false : &amp;quot;hashCode not designed&amp;quot;;&#x0A;    return 42; // any arbitrary constant will do&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_HHNE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class defines hashCode() but not equals()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Hashcode No Equals"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines a &lt;code&gt;hashCode()&lt;/code&gt; method but not an &lt;code&gt;equals()&lt;/code&gt; method.Â  Therefore, the class may violate the invariant that equal objects must have equal hashcodes.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_HHSSC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Huge string constants is duplicated across multiple class files"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Huge Shared String Constant"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A large String constant is duplicated across multiple class files. This is likely because a final field is initialized to a String constant, and the Java language mandates that all references to a final field from other classes be inlined into that classfile. See &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6447475&quot;&gt;JDK bug 6447475&lt;/a&gt; for a description of an occurrence of this bug in the JDK and how resolving it reduced the size of the JDK by 1 megabyte.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_HHUOE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class defines hashCode() and uses Object.equals()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Hashcode Use Object Equals"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines a &lt;code&gt;hashCode()&lt;/code&gt; method but inherits its &lt;code&gt;equals()&lt;/code&gt; method from &lt;code&gt;java.lang.Object&lt;/code&gt; (which defines equality by comparing object references).Â  Although this will probably satisfy the contract that equal objects must have equal hashcodes, it is probably not what was intended by overriding the &lt;code&gt;hashCode()&lt;/code&gt; method.Â  (Overriding &lt;code&gt;hashCode()&lt;/code&gt; implies that the objectâs identity is based on criteria more complicated than simple reference equality.)&lt;/p&gt;&#x0A;&lt;p&gt;If you donât think instances of this class will ever be inserted into a HashMap/HashTable, the recommended &lt;code&gt;hashCode&lt;/code&gt; implementation to use is:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public int hashCode() {&#x0A;    assert false : &amp;quot;hashCode not designed&amp;quot;;&#x0A;    return 42; // any arbitrary constant will do&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_HIEUH" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class inherits equals() and uses Object.hashCode()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Inherits Equals Use Hashcode"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class inherits &lt;code&gt;equals(Object)&lt;/code&gt; from an abstract superclass, and &lt;code&gt;hashCode()&lt;/code&gt; from &lt;code&gt;java.lang.Object&lt;/code&gt; (which returns the identity hash code, an arbitrary value assigned to the object by the VM).Â  Therefore, the class is very likely to violate the invariant that equal objects must have equal hashcodes.&lt;/p&gt;&#x0A;&lt;p&gt;If you donât want to define a hashCode method, and/or donât believe the object will ever be put into a HashMap/Hashtable, define the &lt;code&gt;hashCode()&lt;/code&gt; method to throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_HRPTC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "HTTP cookie formed from untrusted input"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Request Parameter To Cookie"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code constructs an HTTP Cookie using an untrusted HTTP parameter. If this cookie is added to an HTTP response, it will allow a HTTP response splitting vulnerability. See &lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_response_splitting&quot; class=&quot;uri&quot;&gt;http://en.wikipedia.org/wiki/HTTP_response_splitting&lt;/a&gt; for more information.&lt;/p&gt;&#x0A;&lt;p&gt;SpotBugs looks only for the most blatant, obvious cases of HTTP response splitting. If SpotBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more vulnerabilities that SpotBugs doesnât report. If you are concerned about HTTP response splitting, you should seriously consider using a commercial static analysis or pen-testing tool.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_HRPTHH" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "HTTP Response splitting vulnerability"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Request Parameter To Http Header"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code directly writes an HTTP parameter to an HTTP header, which allows for a HTTP response splitting vulnerability. See &lt;a href=&quot;http://en.wikipedia.org/wiki/HTTP_response_splitting&quot; class=&quot;uri&quot;&gt;http://en.wikipedia.org/wiki/HTTP_response_splitting&lt;/a&gt; for more information.&lt;/p&gt;&#x0A;&lt;p&gt;SpotBugs looks only for the most blatant, obvious cases of HTTP response splitting. If SpotBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more vulnerabilities that SpotBugs doesnât report. If you are concerned about HTTP response splitting, you should seriously consider using a commercial static analysis or pen-testing tool.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_HSDHOUC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Signature declares use of unhashable class in hashed construct"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Signature Declares Hashing Of Unhashable Class"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A method, field or class declares a generic signature where a non-hashable class is used in context where a hashable class is required. A class that declares an equals method but inherits a hashCode() method from Object is unhashable, since it doesnât fulfill the requirement that equal objects have equal hashCodes.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_HUOUC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Use of class without a hashCode() method in a hashed data structure"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Use Of Unhashable Class"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A class defines an equals(Object) method but not a hashCode() method, and thus doesnât fulfill the requirement that equal objects have equal hashCodes. An instance of this class is used in a hash data structure, making the need to fix this problem of highest importance.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IACCO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Computation of average could overflow"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Average Computation Could Overflow"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code computes the average of two integers using either division or signed right shift, and then uses the result as the index of an array. If the values being averaged are very large, this can overflow (resulting in the computation of a negative average). Assuming that the result is intended to be nonnegative, you can use an unsigned right shift instead. In other words, rather that using &lt;code&gt;(low+high)/2&lt;/code&gt;, use &lt;code&gt;(low+high) &amp;gt;&amp;gt;&amp;gt; 1&lt;/code&gt;&lt;/p&gt;&#x0A;&lt;p&gt;This bug exists in many earlier implementations of binary search and merge sort. Martin Buchholz &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6412541&quot;&gt;found and fixed it&lt;/a&gt; in the JDK libraries, and Joshua Bloch &lt;a href=&quot;http://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html&quot;&gt;widely publicized the bug pattern&lt;/a&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IAIOIOOM" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Potentially ambiguous invocation of either an inherited or outer method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Ambiguous Invocation Of Inherited Or Outer Method"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;An inner class is invoking a method that could be resolved to either a inherited method or a method defined in an outer class. For example, you invoke &lt;code&gt;foo(17)&lt;/code&gt;, which is defined in both a superclass and in an outer method. By the Java semantics, it will be resolved to invoke the inherited method, but this may not be what you intend.&lt;/p&gt;&#x0A;&lt;p&gt;If you really intend to invoke the inherited method, invoke it by invoking the method on super (e.g., invoke super.foo(17)), and thus it will be clear to other readers of your code and to SpotBugs that you want to invoke the inherited method, not the method in the outer class.&lt;/p&gt;&#x0A;&lt;p&gt;If you call &lt;code&gt;this.foo(17)&lt;/code&gt;, then the inherited method will be invoked. However, since SpotBugs only looks at classfiles, it canât tell the difference between an invocation of &lt;code&gt;this.foo(17)&lt;/code&gt; and &lt;code&gt;foo(17)&lt;/code&gt;, it will still complain about a potential ambiguous invocation.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IAMIFRM" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "JUnit assertion in run method will not be noticed by JUnit"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Assert Method Invoked From Run Method"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A JUnit assertion is performed in a run method. Failed JUnit assertions just result in exceptions being thrown. Thus, if this exception occurs in a thread other than the thread that invokes the test method, the exception will terminate the thread but not result in the test failing.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IATOOS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Doomed attempt to append to an object output stream"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Appending To Object Output Stream"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code opens a file in append mode and then wraps the result in an object output stream. This wonât allow you to append to an existing object output stream stored in a file. If you want to be able to append to an object output stream, you need to keep the object output stream open.&lt;/p&gt;&#x0A;&lt;p&gt;The only situation in which opening a file in append mode and the writing an object output stream could work is if on reading the file you plan to open it in random access mode and seek to the byte offset where the append started.&lt;/p&gt;&#x0A;&lt;p&gt;TODO: example.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IBCFO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Check for oddness that won&apos;t work for negative numbers"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Check For Odd"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code uses x % 2 == 1 to check to see if a value is odd, but this wonât work for negative numbers (e.g., (-5) % 2 == -1). If this code is intending to check for oddness, consider using x &amp;amp; 1 == 1, or x % 2 != 0.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IBCWIV" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Bad comparison of int value with long constant"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Comparison With Int Value"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code compares an int value with a long constant that is outside the range of values that can be represented as an int value. This comparison is vacuous and possibly incorrect.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IBCWNV" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Bad comparison of nonnegative value with negative constant or zero"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Comparison With Nonnegative Value"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code compares a value that is guaranteed to be non-negative with a negative constant or zero.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IBCWSB" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Bad comparison of signed byte"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Comparison With Signed Byte"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Signed bytes can only have a value in the range -128 to 127. Comparing a signed byte with a value outside that range is vacuous and likely to be incorrect. To convert a signed byte &lt;code&gt;b&lt;/code&gt; to an unsigned value in the range 0..255, use &lt;code&gt;0xff &amp;amp; b&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IBRB1" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Integer remainder modulo 1"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Rem By 1"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Any expression (exp % 1) is guaranteed to always return zero. Did you mean (exp &amp;amp; 1) or (exp % 2) instead?&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IBSA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "32 bit int shifted by an amount not in the range -31..31"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Shift Amount"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code performs shift of a 32 bit int by a constant amount outside the range -31..31. The effect of this is to use the lower 5 bits of the integer value to decide how much to shift by (e.g., shifting by 40 bits is the same as shifting by 8 bits, and shifting by 32 bits is the same as shifting by zero bits). This probably isnât what was expected, and it is at least confusing.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IBSM" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "TestCase declares a bad suite method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Suite Method"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Class is a JUnit TestCase and defines a suite() method. However, the suite method needs to be declared as either&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public static junit.framework.Test suite()&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;or&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public static junit.framework.TestSuite suite()&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ICATI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "A collection is added to itself"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Container Added To Itself"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A collection is added to itself. As a result, computing the hashCode of this set will throw a StackOverflowException.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IDCI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Dubious catching of IllegalMonitorStateException"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Dont Catch Imse"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;IllegalMonitorStateException is generally only thrown in case of a design flaw in your code (calling wait or notify on an object you do not hold a lock on).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IEGLIL" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "NodeList.getLength() called in a loop"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Elements Get Length In Loop"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "The method calls NodeList.getLength() inside the loop and NodeList was&#x0A;produced by getElementsByTagName call. This NodeList doesn&apos;t store its&#x0A;length, but computes it every time in not very optimal way. Consider&#x0A;storing the length to the variable before the loop.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IFNG" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Field not guarded against concurrent access"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Field Not Guarded"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This field is annotated with net.jcip.annotations.GuardedBy or javax.annotation.concurrent.GuardedBy, but can be accessed in a way that seems to violate those annotations.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_II2LAI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "int value converted to long and used as absolute time"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Int 2 Long As Instant"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code converts a 32-bit int value to a 64-bit long value, and then passes that value for a method parameter that requires an absolute time value. An absolute time value is the number of milliseconds since the standard base time known as âthe epochâ, namely January 1, 1970, 00:00:00 GMT. For example, the following method, intended to convert seconds since the epoch into a Date, is badly broken:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;Date getDate(int seconds) { return new Date(seconds * 1000); }&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;The multiplication is done using 32-bit arithmetic, and then converted to a 64-bit value. When a 32-bit value is converted to 64-bits and used to express an absolute time value, only dates in December 1969 and January 1970 can be represented.&lt;/p&gt;&#x0A;&lt;p&gt;Correct implementations for the above method are:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// Fails for dates after 2037&#x0A;Date getDate(int seconds) { return new Date(seconds * 1000L); }&#x0A;&#x0A;// better, works for all dates&#x0A;Date getDate(long seconds) { return new Date(seconds * 1000); }&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IIC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Initialization circularity"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Init Circularity"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A circularity was detected in the static initializers of the two classes referenced by the bug instance.Â  Many kinds of unexpected behavior may arise from such circularity.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IICTD" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Integral division result cast to double or float"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Idiv Cast To Double"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code casts the result of an integral division (e.g., int or long division) operation to double or float. Doing division on integers truncates the result to the integer value closest to zero. The fact that the result was cast to double suggests that this precision should have been retained. What was probably meant was to cast one or both of the operands to double &lt;em&gt;before&lt;/em&gt; performing the division. Here is an example:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;int x = 2;&#x0A;int y = 5;&#x0A;// Wrong: yields result 0.0&#x0A;double value1 = x / y;&#x0A;&#x0A;// Right: yields result 0.4&#x0A;double value2 = x / (double) y;&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IICTDPTC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Integral value cast to double and then passed to Math.ceil"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Int Cast To Double Passed To Ceil"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code converts an integral value (e.g., int or long) to a double precision floating point number and then passing the result to the Math.ceil() function, which rounds a double to the next higher integer value. This operation should always be a no-op, since the converting an integer to a double should give a number with no fractional part. It is likely that the operation that generated the value to be passed to Math.ceil was intended to be performed using double precision floating point arithmetic.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IICTFPTR" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "int value cast to float and then passed to Math.round"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Int Cast To Float Passed To Round"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code converts an int value to a float precision floating point number and then passing the result to the Math.round() function, which returns the int/long closest to the argument. This operation should always be a no-op, since the converting an integer to a float should give a number with no fractional part. It is likely that the operation that generated the value to be passed to Math.round was intended to be performed using floating point arithmetic.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IIIO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Inefficient use of String.indexOf(String)"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Inefficient Index Of"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "This code passes a constant string of length 1 to String.indexOf(). It&#x0A;is more efficient to use the integer implementations of&#x0A;String.indexOf(). f. e. call `myString.indexOf(&apos;.&apos;)` instead of&#x0A;`myString.indexOf(&quot;.&quot;)`&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IIL" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "An apparent infinite loop"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Infinite Loop"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This loop doesnât seem to have a way to terminate (other than by perhaps throwing an exception).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IILIO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Inefficient use of String.lastIndexOf(String)"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Inefficient Last Index Of"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "This code passes a constant string of length 1 to String.lastIndexOf().&#x0A;It is more efficient to use the integer implementations of&#x0A;String.lastIndexOf(). f. e. call `myString.lastIndexOf(&apos;.&apos;)` instead of&#x0A;`myString.lastIndexOf(&quot;.&quot;)`&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IIMA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method accesses a private member variable of owning class"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Inefficient Member Access"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "This method of an inner class reads from or writes to a private member&#x0A;variable of the owning class, or calls a private method of the owning&#x0A;class. The compiler must generate a special method to access this&#x0A;private member, causing this to be less efficient. Relaxing the&#x0A;protection of the member variable or method will allow the compiler to&#x0A;treat this as a normal access.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IIMCTL" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Result of integer multiplication cast to long"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Integer Multiply Cast To Long"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code performs integer multiply and then converts the result to a long, as in:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;long convertDaysToMilliseconds(int days) { return 1000*3600*24*days; }&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;If the multiplication is done using long arithmetic, you can avoid the possibility that the result will overflow. For example, you could fix the above code to:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;long convertDaysToMilliseconds(int days) { return 1000L*3600*24*days; }&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;or&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;static final long MILLISECONDS_PER_DAY = 24L*3600*1000;&#x0A;long convertDaysToMilliseconds(int days) { return days * MILLISECONDS_PER_DAY; }&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IIRL" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "An apparent infinite recursive loop"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Infinite Recursive Loop"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method unconditionally invokes itself. This would seem to indicate an infinite recursive loop that will result in a stack overflow.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IIS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Inconsistent synchronization"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Inconsistent Sync"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The fields of this class appear to be accessed inconsistently with respect to synchronization.Â  This bug report indicates that the bug pattern detector judged that&lt;/p&gt;&#x0A;&lt;ul&gt;&#x0A;&lt;li&gt;The class contains a mix of locked and unlocked accesses,&lt;/li&gt;&#x0A;&lt;li&gt;The class is &lt;strong&gt;not&lt;/strong&gt; annotated as javax.annotation.concurrent.NotThreadSafe,&lt;/li&gt;&#x0A;&lt;li&gt;At least one locked access was performed by one of the classâs own methods, and&lt;/li&gt;&#x0A;&lt;li&gt;The number of unsynchronized field accesses (reads and writes) was no more than one third of all accesses, with writes being weighed twice as high as reads&lt;/li&gt;&#x0A;&lt;/ul&gt;&#x0A;&lt;p&gt;A typical bug matching this bug pattern is forgetting to synchronize one of the methods in a class that is intended to be thread-safe.&lt;/p&gt;&#x0A;&lt;p&gt;You can select the nodes labeled âUnsynchronized accessâ to show the code locations where the detector believed that a field was accessed without synchronization.&lt;/p&gt;&#x0A;&lt;p&gt;Note that there are various sources of inaccuracy in this detector; for example, the detector cannot statically detect all situations in which a lock is held.Â  Also, even when the detector is accurate in distinguishing locked vs.Â unlocked accesses, the code in question may still be correct.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IISC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Needless instantiation of class that only supplies static methods"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Instantiate Static Class"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class allocates an object that is based on a class that only supplies static methods. This object does not need to be created, just access the static methods directly using the class name as a qualifier.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IMROI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Integer multiply of result of integer remainder"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Multiplying Result Of Irem"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code multiplies the result of an integer remaining by an integer constant. Be sure you donât have your operator precedence confused. For example i % 60 * 1000 is (i % 60) * 1000, not i % (60 * 1000).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_INSE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Iterator next() method can&apos;t throw NoSuchElementException"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "No Such Element"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class implements the &lt;code&gt;java.util.Iterator&lt;/code&gt; interface.Â  However, its &lt;code&gt;next()&lt;/code&gt; method is not capable of throwing &lt;code&gt;java.util.NoSuchElementException&lt;/code&gt;.Â  The &lt;code&gt;next()&lt;/code&gt; method should be changed so it throws &lt;code&gt;NoSuchElementException&lt;/code&gt; if is called when there are no more elements to return.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_INT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "TestCase has no tests"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "No Tests"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Class is a JUnit TestCase but has not implemented any test methods.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IPCIL" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method calls Pattern.compile in a loop"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Pattern Compile In Loop"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "The method calls Pattern.compile inside the loop passing the constant&#x0A;arguments. If the Pattern should be used several times there&apos;s no reason&#x0A;to compile it for each loop iteration. Move this call outside of the&#x0A;loop or even into static final field.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IPCILI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method compiles the regular expression in a loop"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Pattern Compile In Loop Indirect"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "The method creates the same regular expression inside the loop, so it&#x0A;will be compiled every iteration. It would be more optimal to precompile&#x0A;this regular expression using Pattern.compile outside of the loop.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IPIDBO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "A parameter is dead upon entry to a method but overwritten"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Parameter Is Dead But Overwritten"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The initial value of this parameter is ignored, and the parameter is overwritten here. This often indicates a mistaken belief that the write to the parameter will be conveyed back to the caller.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IPSIL" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method calls prepareStatement in a loop"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Prepare Statement In Loop"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "The method calls Connection.prepareStatement inside the loop passing the&#x0A;constant arguments. If the PreparedStatement should be executed several&#x0A;times there&apos;s no reason to recreate it for each loop iteration. Move&#x0A;this call outside of the loop.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IQURS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Unsigned right shift cast to short/byte"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Questionable Unsigned Right Shift"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code performs an unsigned right shift, whose result is then cast to a short or byte, which discards the upper bits of the result. Since the upper bits are discarded, there may be no difference between a signed and unsigned right shift (depending upon the size of the shift).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ISNS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "TestCase defines setUp that doesn&apos;t call super.setUp()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Setup No Super"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Class is a JUnit TestCase and implements the setUp method. The setUp method should call super.setUp(), but doesnât.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ISUSDI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Superclass uses subclass during initialization"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Superclass Uses Subclass During Initialization"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;During the initialization of a class, the class makes an active use of a subclass. That subclass will not yet be initialized at the time of this use. For example, in the following code, &lt;code&gt;foo&lt;/code&gt; will be null.&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class CircularClassInitialization {&#x0A;    static class InnerClassSingleton extends CircularClassInitialization {&#x0A;        static InnerClassSingleton singleton = new InnerClassSingleton();&#x0A;    }&#x0A;&#x0A;    static CircularClassInitialization foo = InnerClassSingleton.singleton;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ITGC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method allocates an object, only to get the class object"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "New For Getclass"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method allocates an object just to call getClass() on it, in order to retrieve the Class object for it. It is simpler to just access the .class property of the class.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ITNS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "TestCase defines tearDown that doesn&apos;t call super.tearDown()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Teardown No Super"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Class is a JUnit TestCase and implements the tearDown method. The tearDown method should call super.tearDown(), but doesnât.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IVBO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Vacuous bit mask operation on integer value"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Vacuous Bit Operation"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This is an integer bit operation (and, or, or exclusive or) that doesnât do any useful work (e.g., &lt;code&gt;v &amp;amp; 0xffffffff&lt;/code&gt;).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_IVC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Vacuous comparison of integer value"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Vacuous Comparison"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;There is an integer comparison that always returns the same value (e.g., x &amp;lt;= Integer.MAX_VALUE).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_JDAIIT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = " Asserting value of instanceof in tests is not recommended. "/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Dont Assert Instanceof In Tests"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "Asserting type checks in tests is not recommended as a class cast&#x0A;exception message could better indicate the cause of an instance of the&#x0A;wrong class being used than an instanceof assertion.&#x0A;&#x0A;When debugging tests that fail due to bad casts, it may be more useful&#x0A;to observe the output of the resulting ClassCastException which could&#x0A;provide information about the actual encountered type. Asserting the&#x0A;type before casting would instead result in a less informative&#x0A;`&quot;false is not true&quot;` message.&#x0A;&#x0A;If JUnit is used with hamcrest, the&#x0A;[`IsInstanceOf`](https://junit.org/junit4/javadoc/latest/index.html?org/hamcrest/core/IsInstanceOf.html)&#x0A;class from hamcrest could be used instead.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_JFIFIIC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Fields of immutable classes should be final"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Field Isnt Final In Immutable Class"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The class is annotated with net.jcip.annotations.Immutable or javax.annotation.concurrent.Immutable, and the rules for those annotations require that all fields are final. .&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_JJCWRTA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Using monitor style wait methods on util.concurrent abstraction"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Jsr166 Calling Wait Rather Than Await"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method calls &lt;code&gt;wait()&lt;/code&gt;, &lt;code&gt;notify()&lt;/code&gt; or &lt;code&gt;notifyAll()()&lt;/code&gt; on an object that also provides an &lt;code&gt;await()&lt;/code&gt;, &lt;code&gt;signal()&lt;/code&gt;, &lt;code&gt;signalAll()&lt;/code&gt; method (such as util.concurrent Condition objects). This probably isnât what you want, and even if you do want it, you should consider changing your design, as other developers will find it exceptionally confusing.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_JJLM" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Synchronization performed on Lock"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Jsr166 Lock Monitorenter"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method performs synchronization on an object that implements java.util.concurrent.locks.Lock. Such an object is locked/unlocked using &lt;code&gt;acquire()&lt;/code&gt;/&lt;code&gt;release()&lt;/code&gt; rather than using the &lt;code&gt;synchronized (...)&lt;/code&gt; construct.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_JJUM" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Synchronization performed on util.concurrent instance"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Jsr166 Utilconcurrent Monitorenter"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method performs synchronization on an object that is an instance of a class from the java.util.concurrent package (or its subclasses). Instances of these classes have their own concurrency control mechanisms that are orthogonal to the synchronization provided by the Java keyword &lt;code&gt;synchronized&lt;/code&gt;. For example, synchronizing on an &lt;code&gt;AtomicBoolean&lt;/code&gt; will not prevent other threads from modifying the &lt;code&gt;AtomicBoolean&lt;/code&gt;.&lt;/p&gt;&#x0A;&lt;p&gt;Such code may be correct, but should be carefully reviewed and documented, and may confuse people who have to maintain the code at a later date.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_JSONSOIS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Store of non serializable object into HttpSession"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Store Of Non Serializable Object Into Session"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code seems to be storing a non-serializable object into an HttpSession. If this session is passivated or migrated, an error will result.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_JUSS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "TestCase implements a non-static suite method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Suite Not Static"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Class is a JUnit TestCase and implements the suite() method. The suite method should be declared as being static, but isnât.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_LLIS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Incorrect lazy initialization of static field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Lazy Init Static"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains an unsynchronized lazy initialization of a non-volatile static field. Because the compiler or processor may reorder instructions, threads are not guaranteed to see a completely initialized object, &lt;em&gt;if the method can be called by multiple threads&lt;/em&gt;. You can make the field volatile to correct the problem. For more information, see the &lt;a href=&quot;http://www.cs.umd.edu/~pugh/java/memoryModel/&quot;&gt;Java Memory Model web site&lt;/a&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_LLIUS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Incorrect lazy initialization and update of static field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Lazy Init Update Static"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains an unsynchronized lazy initialization of a static field. After the field is set, the object stored into that location is further updated or accessed. The setting of the field is visible to other threads as soon as it is set. If the further accesses in the method that set the field serve to initialize the object, then you have a &lt;em&gt;very serious&lt;/em&gt; multithreading bug, unless something else prevents any other thread from accessing the stored object until it is fully initialized.&lt;/p&gt;&#x0A;&lt;p&gt;Even if you feel confident that the method is never called by multiple threads, it might be better to not set the static field until the value you are setting it to is fully populated/initialized.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_LLLDTWR" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Potential lost logger changes due to weak reference in OpenJDK"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Lost Logger Due To Weak Reference"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "OpenJDK introduces a potential incompatibility. In particular, the&#x0A;java.util.logging.Logger behavior has changed. Instead of using strong&#x0A;references, it now uses weak references internally. That&apos;s a reasonable&#x0A;change, but unfortunately some code relies on the old behavior - when&#x0A;changing logger configuration, it simply drops the logger reference.&#x0A;That means that the garbage collector is free to reclaim that memory,&#x0A;which means that the logger configuration is lost. For example,&#x0A;consider:&#x0A;&#x0A;``` {.java}&#x0A;public static void initLogging() throws Exception {&#x0A;    Logger logger = Logger.getLogger(&quot;edu.umd.cs&quot;);&#x0A;    logger.addHandler(new FileHandler()); // call to change logger configuration&#x0A;    logger.setUseParentHandlers(false); // another call to change logger configuration&#x0A;}&#x0A;```&#x0A;&#x0A;The logger reference is lost at the end of the method (it doesn&apos;t escape&#x0A;the method), so if you have a garbage collection cycle just after the&#x0A;call to initLogging, the logger configuration is lost (because Logger&#x0A;only keeps weak references).&#x0A;&#x0A;``` {.java}&#x0A;public static void main(String[] args) throws Exception {&#x0A;    initLogging(); // adds a file handler to the logger&#x0A;    System.gc(); // logger configuration lost&#x0A;    Logger.getLogger(&quot;edu.umd.cs&quot;).info(&quot;Some message&quot;); // this isn&apos;t logged to the file as expected&#x0A;}&#x0A;```&#x0A;&#x0A;*Ulf Ochsenfahrt and Eric Fellheimer*&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MBIS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Switch statement found where one case falls through to the next case"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Switch Fallthrough"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains a switch statement where one case branch will fall through to the next case. Usually you need to end this case with a break or return.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MCBF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Field isn&apos;t final and can&apos;t be protected from malicious code"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Cannot Be Final"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A mutable static field could be changed by malicious code or by accident from another package. Unfortunately, the way the field is used doesnât allow any easy fix to this problem.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MCMF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class defines field that masks a superclass field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Class Masks Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines a field with the same name as a visible instance field in a superclass. This is confusing, and may indicate an error if methods update or access one of the fields when they wanted the other.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MEFS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Public enum method unconditionally sets its field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Enum Field Setter"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This public method declared in public enum unconditionally sets enum field, thus this field can be changed by malicious code or by accident from another package. Though mutable enum fields may be used for lazy initialization, itâs a bad practice to expose them to the outer world. Consider removing this method or declaring it package-private.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MFP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Field should be both final and package protected"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Final Pkgprotect"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A mutable static field could be changed by malicious code or by accident from another package. The field could be made package protected and/or made final to avoid this vulnerability.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MMA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Field is a mutable array"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Mutable Array"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A final static field references an array and can be accessed by malicious code or by accident from another package. This code can freely modify the contents of the array.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MMC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Field is a mutable collection"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Mutable Collection"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A mutable collection instance is assigned to a final static field, thus can be changed by malicious code or by accident from another package. Consider wrapping this field into Collections.unmodifiableSet/List/Map/etc. to avoid this vulnerability.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MMCP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Field is a mutable collection which should be package protected"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Mutable Collection Pkgprotect"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A mutable collection instance is assigned to a final static field, thus can be changed by malicious code or by accident from another package. The field could be made package protected to avoid this vulnerability. Alternatively you may wrap this field into Collections.unmodifiableSet/List/Map/etc. to avoid this vulnerability.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MMEF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Enum field is public and mutable"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Mutable Enum Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A mutable public field is defined inside a public enum, thus can be changed by malicious code or by accident from another package. Though mutable enum fields may be used for lazy initialization, itâs a bad practice to expose them to the outer world. Consider declaring this field final and/or package-private.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MMH" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Field is a mutable Hashtable"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Mutable Hashtable"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A final static field references a Hashtable and can be accessed by malicious code or by accident from another package. This code can freely modify the contents of the Hashtable.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MMMF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method defines a variable that obscures a field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Method Masks Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method defines a local variable with the same name as a field in this class or a superclass. This may cause the method to read an uninitialized value from the field, leave the field uninitialized, or both.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MMN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Mismatched notify()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Mismatched Notify"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method calls Object.notify() or Object.notifyAll() without obviously holding a lock on the object.Â  Calling notify() or notifyAll() without a lock held will result in an &lt;code&gt;IllegalMonitorStateException&lt;/code&gt; being thrown.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MMSF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Mutable servlet field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Mutable Servlet Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A web server generally only creates one instance of servlet or JSP class (i.e., treats the class as a Singleton), and will have multiple threads invoke methods on that instance to service multiple simultaneous requests. Thus, having a mutable instance field generally creates race conditions.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MMW" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Mismatched wait()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Mismatched Wait"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method calls Object.wait() without obviously holding a lock on the object.Â  Calling wait() without a lock held will result in an &lt;code&gt;IllegalMonitorStateException&lt;/code&gt; being thrown.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MOP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Field should be moved out of an interface and made package protected"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Ooi Pkgprotect"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A final static field that is defined in an interface references a mutable object such as an array or hashtable. This mutable object could be changed by malicious code or by accident from another package. To solve this, the field needs to be moved to a class and made package protected to avoid this vulnerability.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Field should be package protected"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Pkgprotect"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A mutable static field could be changed by malicious code or by accident. The field could be made package protected to avoid this vulnerability.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MRIA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Public static method may expose internal representation by returning array"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Expose Rep"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A public static method returns a reference to an array that is part of the static state of the class. Any code that calls this method can freely modify the underlying array. One fix is to return a copy of the array.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MSBF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Field isn&apos;t final but should be"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Should Be Final"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This static field public but not final, and could be changed by malicious code or by accident from another package. The field could be made final to avoid this vulnerability.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MSBRTBF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Field isn&apos;t final but should be refactored to be so"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Should Be Refactored To Be Final"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This static field public but not final, and could be changed by malicious code or by accident from another package. The field could be made final to avoid this vulnerability. However, the static initializer contains more than one write to the field, so doing so will require some refactoring.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MSOFTGCTF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Synchronization on field in futile attempt to guard that field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Sync On Field To Guard Changing That Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method synchronizes on a field in what appears to be an attempt to guard against simultaneous updates to that field. But guarding a field gets a lock on the referenced object, not on the field. This may not provide the mutual exclusion you need, and other threads might be obtaining locks on the referenced objects (for other purposes). An example of this pattern would be:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private Long myNtfSeqNbrCounter = new Long(0);&#x0A;private Long getNotificationSequenceNumber() {&#x0A;     Long result = null;&#x0A;     synchronized(myNtfSeqNbrCounter) {&#x0A;         result = new Long(myNtfSeqNbrCounter.longValue() + 1);&#x0A;         myNtfSeqNbrCounter = new Long(result.longValue());&#x0A;     }&#x0A;     return result;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MSOUF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method synchronizes on an updated field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Sync On Updated Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method synchronizes on an object referenced from a mutable field. This is unlikely to have useful semantics, since different threads may be synchronizing on different objects.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MSSIF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class extends Servlet class and uses instance variables"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Suspect Servlet Instance Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class extends from a Servlet class, and uses an instance member variable. Since only one instance of a Servlet class is created by the J2EE framework, and used in a multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider only using method local variables.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MSVUID" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class is Serializable, but doesn&apos;t define serialVersionUID"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "No Serialversionid"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class implements the &lt;code&gt;Serializable&lt;/code&gt; interface, but does not define a &lt;code&gt;serialVersionUID&lt;/code&gt; field.Â  A change as simple as adding a reference to a .class object will add synthetic fields to the class, which will unfortunately change the implicit serialVersionUID (e.g., adding a reference to &lt;code&gt;String.class&lt;/code&gt; will generate a static field &lt;code&gt;class$java$lang$String&lt;/code&gt;). Also, different source code to bytecode compilers may use different naming conventions for synthetic variables generated for references to class objects or inner classes. To ensure interoperability of Serializable across versions, consider adding an explicit serialVersionUID.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MWSNAEC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Apparent method/constructor confusion"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Method Constructor Confusion"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This regular method has the same name as the class it is defined in. It is likely that this was intended to be a constructor. If it was intended to be a constructor, remove the declaration of a void return value. If you had accidentally defined this method, realized the mistake, defined a proper constructor but canât get rid of this method due to backwards compatibility, deprecate the method.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MeNC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method names should start with a lower case letter"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Method Naming Convention"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Methods should be verbs, in mixed case with the first letter lowercase, with the first letter of each internal word capitalized.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_MtSSIF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class extends Struts Action class and uses instance variables"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Suspect Struts Instance Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class extends from a Struts Action class, and uses an instance member variable. Since only one instance of a struts Action class is created by the Struts framework, and used in a multithreaded way, this paradigm is highly discouraged and most likely problematic. Consider only using method local variables. Only instance fields that are written outside of a monitor are reported.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NAMBN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method does not check for null argument"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Argument Might Be Null"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A parameter to this method has been identified as a value that should always be checked to see whether or not it is null, but it is being dereferenced without a preceding null check.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NAN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Null pointer dereference"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Always Null"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A null pointer is dereferenced here.Â  This will lead to a &lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NANE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Null pointer dereference in method on exception path"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Always Null Exception"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A pointer which is null on an exception path is dereferenced here.Â  This will lead to a &lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed.Â  Note that because SpotBugs currently does not prune infeasible exception paths, this may be a false warning.&lt;/p&gt;&#x0A;&lt;p&gt;Also note that SpotBugs considers the default case of a switch statement to be an exception path, since the default case is often infeasible.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NBE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class defines equal(Object); should it be equals(Object)?"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Equal"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines a method &lt;code&gt;equal(Object)&lt;/code&gt;.Â  This method does not override the &lt;code&gt;equals(Object)&lt;/code&gt; method in &lt;code&gt;java.lang.Object&lt;/code&gt;, which is probably what was intended.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NBRN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method with Boolean return type returns explicit null"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Boolean Return Null"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A method that returns either Boolean.TRUE, Boolean.FALSE or null is an accident waiting to happen. This method can be invoked as though it returned a value of type boolean, and the compiler will insert automatic unboxing of the Boolean value. If a null value is returned, this will result in a NullPointerException.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Confusing method names"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Confusing"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The referenced methods have names that differ only by capitalization.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NCN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "close() invoked on a value that is always null"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Closing Null"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;close() is being invoked on a value that is always null. If this statement is executed, a null pointer exception will occur. But the big risk here you never close something that should be closed.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NCNE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class is not derived from an Exception, even though it is named as such"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Class Not Exception"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class is not derived from another exception, but ends with âExceptionâ. This will be confusing to users of this class.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NDNSC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Potentially dangerous use of non-short-circuit logic"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Dangerous Non Short Circuit"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code seems to be using non-short-circuit logic (e.g., &amp;amp; or |) rather than short-circuit logic (&amp;amp;&amp;amp; or ||). In addition, it seem possible that, depending on the value of the left hand side, you might not want to evaluate the right hand side (because it would have side effects, could cause an exception or could be expensive.&lt;/p&gt;&#x0A;&lt;p&gt;Non-short-circuit logic causes both sides of the expression to be evaluated even when the result can be inferred from knowing the left-hand side. This can be less efficient and can result in errors if the left-hand side guards cases when evaluating the right-hand side can generate an error.&lt;/p&gt;&#x0A;&lt;p&gt;See &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2&quot;&gt;the Java Language Specification&lt;/a&gt; for details.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NDORV" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Dereference of the result of readLine() without nullcheck"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Dereference Of Readline Value"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The result of invoking readLine() is dereferenced without checking to see if the result is null. If there are no more lines of text to read, readLine() will return null and dereferencing that will generate a null pointer exception.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NFKUAI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Use of identifier that is a keyword in later versions of Java"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Future Keyword Used As Identifier"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The identifier is a word that is reserved as a keyword in later versions of Java, and your code will need to be changed in order to compile it in later versions of Java.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NFKUAMI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Use of identifier that is a keyword in later versions of Java"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Future Keyword Used As Member Identifier"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This identifier is used as a keyword in later versions of Java. This code, and any code that references this API, will need to be changed in order to compile it in later versions of Java.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NFNC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Field names should start with a lower case letter"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Field Naming Convention"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Names of fields that are not final should be in mixed case with a lowercase first letter and the first letters of subsequent words capitalized.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NGD" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Null value is guaranteed to be dereferenced"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Guaranteed Deref"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;There is a statement or branch that if executed guarantees that a value is null at this point, and that value that is guaranteed to be dereferenced (except on forward paths involving runtime exceptions).&lt;/p&gt;&#x0A;&lt;p&gt;Note that a check such as &lt;code&gt;if (x == null) throw new NullPointerException();&lt;/code&gt; is treated as a dereference of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NGDOEP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Value is null and guaranteed to be dereferenced on exception path"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Guaranteed Deref On Exception Path"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;There is a statement or branch on an exception path that if executed guarantees that a value is null at this point, and that value that is guaranteed to be dereferenced (except on forward paths involving runtime exceptions).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NIDOR" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Immediate dereference of the result of readLine()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Immediate Dereference Of Readline"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The result of invoking readLine() is immediately dereferenced. If there are no more lines of text to read, readLine() will return null and dereferencing that will generate a null pointer exception.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NLOKNV" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Load of known null value"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Load Of Known Null Value"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The variable referenced at this point is known to be null due to an earlier check against null. Although this is valid, it might be a mistake (perhaps you intended to refer to a different variable, or perhaps the earlier check to see if the variable is null should have been a check to see if it was non-null).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NLT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class defines tostring(); should it be toString()?"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Lcase Tostring"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines a method called &lt;code&gt;tostring()&lt;/code&gt;.Â  This method does not override the &lt;code&gt;toString()&lt;/code&gt; method in &lt;code&gt;java.lang.Object&lt;/code&gt;, which is probably what was intended.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NMPTA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method tightens nullness annotation on parameter"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Method Parameter Tightens Annotation"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A method should always implement the contract of a method it overrides. Thus, if a method takes a parameter that is marked as &lt;span class=&quot;citation&quot; data-cites=&quot;Nullable&quot;&gt;@Nullable&lt;/span&gt;, you shouldnât override that method in a subclass with a method where that parameter is &lt;span class=&quot;citation&quot; data-cites=&quot;Nonnull&quot;&gt;@Nonnull&lt;/span&gt;. Doing so violates the contract that the method should handle a null parameter.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NMRRA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method relaxes nullness annotation on return value"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Method Return Relaxing Annotation"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A method should always implement the contract of a method it overrides. Thus, if a method takes is annotated as returning a &lt;span class=&quot;citation&quot; data-cites=&quot;Nonnull&quot;&gt;@Nonnull&lt;/span&gt; value, you shouldnât override that method in a subclass with a method annotated as returning a &lt;span class=&quot;citation&quot; data-cites=&quot;Nullable&quot;&gt;@Nullable&lt;/span&gt; or &lt;span class=&quot;citation&quot; data-cites=&quot;CheckForNull&quot;&gt;@CheckForNull&lt;/span&gt; value. Doing so violates the contract that the method shouldnât return null.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NNFNIIC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Non-null field is not initialized"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Nonnull Field Not Initialized In Constructor"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The field is marked as non-null, but isnât written to by the constructor. The field might be initialized elsewhere during constructor, or might always be initialized before use.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NNI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "A known null value is checked to see if it is an instance of a type"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Null Instanceof"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This instanceof test will always return false, since the value being checked is guaranteed to be null. Although this is safe, make sure it isnât an indication of some misunderstanding or some other logic error.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NNN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Naked notify"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Naked Notify"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A call to &lt;code&gt;notify()&lt;/code&gt; or &lt;code&gt;notifyAll()&lt;/code&gt; was made without any (apparent) accompanying modification to mutable object state.Â  In general, calling a notify method on a monitor is done because some condition another thread is waiting for has become true.Â  However, for the condition to be meaningful, it must involve a heap object that is visible to both threads.&lt;/p&gt;&#x0A;&lt;p&gt;This bug does not necessarily indicate an error, since the change to mutable object state may have taken place in a method which then called the method containing the notification.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NNNN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Using notify() rather than notifyAll()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Notify Not Notifyall"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method calls &lt;code&gt;notify()&lt;/code&gt; rather than &lt;code&gt;notifyAll()&lt;/code&gt;.Â  Java monitors are often used for multiple conditions.Â  Calling &lt;code&gt;notify()&lt;/code&gt; only wakes up one thread, meaning that the thread woken up might not be the one waiting for the condition that the caller just satisfied.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NNOSP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Possible null pointer dereference"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Null On Some Path"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;There is a branch of statement that, &lt;em&gt;if executed,&lt;/em&gt; guarantees that a null value will be dereferenced, which would generate a &lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed. Of course, the problem might be that the branch or statement is infeasible and that the null pointer exception canât ever be executed; deciding that is beyond the ability of SpotBugs.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NNOSPE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Possible null pointer dereference in method on exception path"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Null On Some Path Exception"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A reference value which is null on some exception control path is dereferenced here.Â  This may lead to a &lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed.Â  Note that because SpotBugs currently does not prune infeasible exception paths, this may be a false warning.&lt;/p&gt;&#x0A;&lt;p&gt;Also note that SpotBugs considers the default case of a switch statement to be an exception path, since the default case is often infeasible.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NNOSPFRV" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Possible null pointer dereference due to return value of called method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Null On Some Path From Return Value"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The return value from a method is dereferenced without a null check, and the return value of that method is one that should generally be checked for null. This may lead to a &lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NNOSPMBI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Possible null pointer dereference on branch that might be infeasible"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Null On Some Path Might Be Infeasible"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;There is a branch of statement that, &lt;em&gt;if executed,&lt;/em&gt; guarantees that a null value will be dereferenced, which would generate a &lt;code&gt;NullPointerException&lt;/code&gt; when the code is executed. Of course, the problem might be that the branch or statement is infeasible and that the null pointer exception canât ever be executed; deciding that is beyond the ability of SpotBugs. Due to the fact that this value had been previously tested for nullness, this is a definite possibility.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NNPD" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method call passes null for non-null parameter"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Null Param Deref"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method call passes a null value for a non-null method parameter. Either the parameter is annotated as a parameter that should always be non-null, or analysis has shown that it will always be dereferenced.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NNPDATD" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method call passes null for non-null parameter"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Null Param Deref All Targets Dangerous"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A possibly-null value is passed at a call site where all known target methods require the parameter to be non-null. Either the parameter is annotated as a parameter that should always be non-null, or analysis has shown that it will always be dereferenced.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NNPDN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Non-virtual method call passes null for non-null parameter"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Null Param Deref Nonvirtual"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A possibly-null value is passed to a non-null method parameter. Either the parameter is annotated as a parameter that should always be non-null, or analysis has shown that it will always be dereferenced.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NNPV" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method call passes null to a non-null parameter"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Nonnull Param Violation"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method passes a null value as the parameter of a method which must be non-null. Either this parameter has been explicitly marked as &lt;span class=&quot;citation&quot; data-cites=&quot;Nonnull&quot;&gt;@Nonnull&lt;/span&gt;, or analysis has determined that this parameter is always dereferenced.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NNRV" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method may return null, but is declared @Nonnull"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Nonnull Return Violation"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method may return a null value, but the method (or a superclass method which it overrides) is declared to return &lt;span class=&quot;citation&quot; data-cites=&quot;Nonnull&quot;&gt;@Nonnull&lt;/span&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NNSC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Questionable use of non-short-circuit logic"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Non Short Circuit"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code seems to be using non-short-circuit logic (e.g., &amp;amp; or |) rather than short-circuit logic (&amp;amp;&amp;amp; or ||). Non-short-circuit logic causes both sides of the expression to be evaluated even when the result can be inferred from knowing the left-hand side. This can be less efficient and can result in errors if the left-hand side guards cases when evaluating the right-hand side can generate an error.&lt;/p&gt;&#x0A;&lt;p&gt;See &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.22.2&quot;&gt;the Java Language Specification&lt;/a&gt; for details.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NORN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method with Optional return type returns explicit null"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Optional Return Null"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The usage of Optional return type (java.util.Optional or com.google.common.base.Optional) always means that explicit null returns were not desired by design. Returning a null value in such case is a contract violation and will most likely break client code.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NPMBNBMAN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Parameter must be non-null but is marked as nullable"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Parameter Must Be Nonnull But Marked As Nullable"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This parameter is always used in a way that requires it to be non-null, but the parameter is explicitly annotated as being Nullable. Either the use of the parameter or the annotation is wrong.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NSANCF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Synchronize and null check on the same field."/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Sync And Null Check Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Since the field is synchronized on, it seems not likely to be null. If it is null and then synchronized on a NullPointerException will be thrown and the check would be pointless. Better to synchronize on another field.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NSINF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Store of null value into field annotated @Nonnull"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Store Into Nonnull Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A value that could be null is stored into a field that has been annotated as &lt;span class=&quot;citation&quot; data-cites=&quot;Nonnull&quot;&gt;@Nonnull&lt;/span&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NSSNAI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class names shouldn&apos;t shadow simple name of implemented interface"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Same Simple Name As Interface"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class/interface has a simple name that is identical to that of an implemented/extended interface, except that the interface is in a different package (e.g., &lt;code&gt;alpha.Foo&lt;/code&gt; extends &lt;code&gt;beta.Foo&lt;/code&gt;). This can be exceptionally confusing, create lots of situations in which you have to look at import statements to resolve references and creates many opportunities to accidentally define methods that do not override methods in their superclasses.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NSSNAS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class names shouldn&apos;t shadow simple name of superclass"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Same Simple Name As Superclass"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class has a simple name that is identical to that of its superclass, except that its superclass is in a different package (e.g., &lt;code&gt;alpha.Foo&lt;/code&gt; extends &lt;code&gt;beta.Foo&lt;/code&gt;). This can be exceptionally confusing, create lots of situations in which you have to look at import statements to resolve references and creates many opportunities to accidentally define methods that do not override methods in their superclasses.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NTCRN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "toString method may return null"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Tostring Could Return Null"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This toString method seems to return null in some circumstances. A liberal reading of the spec could be interpreted as allowing this, but it is probably a bad idea and could cause other code to break. Return the empty string or some other appropriate string rather than null.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NUF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Read of unwritten field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unwritten Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "The program is dereferencing a field that does not seem to ever have a&#x0A;non-null value written to it. Unless the field is initialized via some&#x0A;mechanism not seen by the analysis, dereferencing this value will&#x0A;generate a null pointer exception.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NUPOPF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Read of unwritten public or protected field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unwritten Public Or Protected Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "The program is dereferencing a public or protected field that does not&#x0A;seem to ever have a non-null value written to it. Unless the field is&#x0A;initialized via some mechanism not seen by the analysis, dereferencing&#x0A;this value will generate a null pointer exception.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NVC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Very confusing method names"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Very Confusing"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The referenced methods have names that differ only by capitalization. This is very confusing because if the capitalization were identical then one of the methods would override the other.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NVCI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Very confusing method names (but perhaps intentional)"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Very Confusing Intentional"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The referenced methods have names that differ only by capitalization. This is very confusing because if the capitalization were identical then one of the methods would override the other. From the existence of other methods, it seems that the existence of both of these methods is intentional, but is sure is confusing. You should try hard to eliminate one of them, unless you are forced to have both due to frozen APIs.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NWP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method doesn&apos;t override method in superclass due to wrong package for parameter"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Wrong Package"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The method in the subclass doesnât override a similar method in a superclass because the type of a parameter doesnât exactly match the type of the corresponding parameter in the superclass. For example, if you have:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import alpha.Foo;&#x0A;&#x0A;public class A {&#x0A;    public int f(Foo x) { return 17; }&#x0A;}&#x0A;----&#x0A;import beta.Foo;&#x0A;&#x0A;public class B extends A {&#x0A;    public int f(Foo x) { return 42; }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;The &lt;code&gt;f(Foo)&lt;/code&gt; method defined in class &lt;code&gt;B&lt;/code&gt; doesnât override the &lt;code&gt;f(Foo)&lt;/code&gt; method defined in class &lt;code&gt;A&lt;/code&gt;, because the argument types are &lt;code&gt;Foo&lt;/code&gt;âs from different packages.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_NWPI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method doesn&apos;t override method in superclass due to wrong package for parameter"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Wrong Package Intentional"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The method in the subclass doesnât override a similar method in a superclass because the type of a parameter doesnât exactly match the type of the corresponding parameter in the superclass. For example, if you have:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import alpha.Foo;&#x0A;&#x0A;public class A {&#x0A;    public int f(Foo x) { return 17; }&#x0A;}&#x0A;----&#x0A;import beta.Foo;&#x0A;&#x0A;public class B extends A {&#x0A;    public int f(Foo x) { return 42; }&#x0A;    public int f(alpha.Foo x) { return 27; }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;The &lt;code&gt;f(Foo)&lt;/code&gt; method defined in class &lt;code&gt;B&lt;/code&gt; doesnât override the &lt;code&gt;f(Foo)&lt;/code&gt; method defined in class &lt;code&gt;A&lt;/code&gt;, because the argument types are &lt;code&gt;Foo&lt;/code&gt;âs from different packages.&lt;/p&gt;&#x0A;&lt;p&gt;In this case, the subclass does define a method with a signature identical to the method in the superclass, so this is presumably understood. However, such methods are exceptionally confusing. You should strongly consider removing or deprecating the method with the similar but not identical signature.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_OMMIS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Super method is annotated with @OverridingMethodsMustInvokeSuper, but the overriding method isn&apos;t calling the super method."/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Methods Must Invoke Super"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Super method is annotated with &lt;span class=&quot;citation&quot; data-cites=&quot;OverridingMethodsMustInvokeSuper&quot;&gt;@OverridingMethodsMustInvokeSuper&lt;/span&gt;, but the overriding method isnât calling the super method.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_OODR" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method may fail to close database resource"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Open Database Resource"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The method creates a database resource (such as a database connection or row set), does not assign it to any fields, pass it to other methods, or return it, and does not appear to close the object on all paths out of the method.Â  Failure to close database resources on all paths out of a method may result in poor performance, and could cause the application to have problems communicating with the database.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_OODREP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method may fail to close database resource on exception"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Open Database Resource Exception Path"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The method creates a database resource (such as a database connection or row set), does not assign it to any fields, pass it to other methods, or return it, and does not appear to close the object on all exception paths out of the method.Â  Failure to close database resources on all paths out of a method may result in poor performance, and could cause the application to have problems communicating with the database.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_OOS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method may fail to close stream"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Open Stream"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The method creates an IO stream object, does not assign it to any fields, pass it to other methods that might close it, or return it, and does not appear to close the stream on all paths out of the method.Â  This may result in a file descriptor leak.Â  It is generally a good idea to use a &lt;code&gt;finally&lt;/code&gt; block to ensure that streams are closed.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_OOSEP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method may fail to close stream on exception"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Open Stream Exception Path"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The method creates an IO stream object, does not assign it to any fields, pass it to other methods, or return it, and does not appear to close it on all possible exception paths out of the method.Â  This may result in a file descriptor leak.Â  It is generally a good idea to use a &lt;code&gt;finally&lt;/code&gt; block to ensure that streams are closed.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_OTAC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method uses toArray() with zero-length array argument"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Inefficient To Array"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "This method uses the toArray() method of a collection derived class, and&#x0A;passes in a zero-length prototype array argument. It is more efficient&#x0A;to use `myCollection.toArray(new Foo[myCollection.size()])` If the array&#x0A;passed in is big enough to store all of the elements of the collection,&#x0A;then it is populated and returned directly. This avoids the need to&#x0A;create a second array (by reflection) to return as the result.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_OUO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method may fail to clean up stream or resource"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unsatisfied Obligation"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "This method may fail to clean up (close, dispose of) a stream, database&#x0A;object, or other resource requiring an explicit cleanup operation.&#x0A;&#x0A;In general, if a method opens a stream or other resource, the method&#x0A;should use a try/finally block to ensure that the stream or resource is&#x0A;cleaned up before the method returns.&#x0A;&#x0A;This bug pattern is essentially the same as the OS\_OPEN\_STREAM and&#x0A;ODR\_OPEN\_DATABASE\_RESOURCE bug patterns, but is based on a different&#x0A;(and hopefully better) static analysis technique. We are interested is&#x0A;getting feedback about the usefulness of this bug pattern. For sending&#x0A;feedback, check:&#x0A;&#x0A;-   [contributing&#x0A;    guideline](https://github.com/spotbugs/spotbugs/blob/master/CONTRIBUTING.md)&#x0A;-   [malinglist](https://github.com/spotbugs/discuss/issues?q=)&#x0A;&#x0A;In particular, the false-positive suppression heuristics for this bug&#x0A;pattern have not been extensively tuned, so reports about false&#x0A;positives are helpful to us.&#x0A;&#x0A;See Weimer and Necula, *Finding and Preventing Run-Time Error Handling&#x0A;Mistakes*, for a description of the analysis technique.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_OUOEE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method may fail to clean up stream or resource on checked exception"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unsatisfied Obligation Exception Edge"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "This method may fail to clean up (close, dispose of) a stream, database&#x0A;object, or other resource requiring an explicit cleanup operation.&#x0A;&#x0A;In general, if a method opens a stream or other resource, the method&#x0A;should use a try/finally block to ensure that the stream or resource is&#x0A;cleaned up before the method returns.&#x0A;&#x0A;This bug pattern is essentially the same as the OS\_OPEN\_STREAM and&#x0A;ODR\_OPEN\_DATABASE\_RESOURCE bug patterns, but is based on a different&#x0A;(and hopefully better) static analysis technique. We are interested is&#x0A;getting feedback about the usefulness of this bug pattern. For sending&#x0A;feedback, check:&#x0A;&#x0A;-   [contributing&#x0A;    guideline](https://github.com/spotbugs/spotbugs/blob/master/CONTRIBUTING.md)&#x0A;-   [malinglist](https://github.com/spotbugs/discuss/issues?q=)&#x0A;&#x0A;In particular, the false-positive suppression heuristics for this bug&#x0A;pattern have not been extensively tuned, so reports about false&#x0A;positives are helpful to us.&#x0A;&#x0A;See Weimer and Necula, *Finding and Preventing Run-Time Error Handling&#x0A;Mistakes*, for a description of the analysis technique.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_PAPT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Absolute path traversal in servlet"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Absolute Path Traversal"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize absolute path sequences such as â/abs/pathâ that can resolve to a location that is outside of that directory. See &lt;a href=&quot;http://cwe.mitre.org/data/definitions/36.html&quot; class=&quot;uri&quot;&gt;http://cwe.mitre.org/data/definitions/36.html&lt;/a&gt; for more information.&lt;/p&gt;&#x0A;&lt;p&gt;SpotBugs looks only for the most blatant, obvious cases of absolute path traversal. If SpotBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more vulnerabilities that SpotBugs doesnât report. If you are concerned about absolute path traversal, you should seriously consider using a commercial static analysis or pen-testing tool.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_PCI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "clone method does not call super.clone()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Idiom No Super Call"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This non-final class defines a clone() method that does not call super.clone(). If this class (â&lt;em&gt;A&lt;/em&gt;â) is extended by a subclass (â&lt;em&gt;B&lt;/em&gt;â), and the subclass &lt;em&gt;B&lt;/em&gt; calls super.clone(), then it is likely that &lt;em&gt;B&lt;/em&gt;âs clone() method will return an object of type &lt;em&gt;A&lt;/em&gt;, which violates the standard contract for clone().&lt;/p&gt;&#x0A;&lt;p&gt;If all clone() methods call super.clone(), then they are guaranteed to use Object.clone(), which always returns an object of the correct type.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_PDREOII" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Don&apos;t reuse entry objects in iterators"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Dont Reuse Entry Objects In Iterators"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The entrySet() method is allowed to return a view of the underlying Map in which an Iterator and Map.Entry. This clever idea was used in several Map implementations, but introduces the possibility of nasty coding mistakes. If a map &lt;code&gt;m&lt;/code&gt; returns such an iterator for an entrySet, then &lt;code&gt;c.addAll(m.entrySet())&lt;/code&gt; will go badly wrong. All of the Map implementations in OpenJDK 1.7 have been rewritten to avoid this, you should to.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_PPS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class exposes synchronization and semaphores in its public interface"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Public Semaphores"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class uses synchronization along with wait(), notify() or notifyAll() on itself (the this reference). Client classes that use this class, may, in addition, use an instance of this class as a synchronizing object. Because two classes are using the same object for synchronization, Multithread correctness is suspect. You should not synchronize nor call semaphore methods on a public reference. Consider using a internal private member variable to control synchronization.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_PPZLA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Consider returning a zero length array rather than null"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Prefer Zero Length Arrays"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;It is often a better design to return a length zero array rather than a null reference to indicate that there are no results (i.e., an empty list of results). This way, no explicit check for null is needed by clients of the method.&lt;/p&gt;&#x0A;&lt;p&gt;On the other hand, using null to indicate âthere is no answer to this questionâ is probably appropriate. For example, &lt;code&gt;File.listFiles()&lt;/code&gt; returns an empty list if given a directory containing no files, and returns null if the file is not a directory.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_PRPT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Relative path traversal in servlet"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Relative Path Traversal"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The software uses an HTTP request parameter to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as â..â that can resolve to a location that is outside of that directory. See &lt;a href=&quot;http://cwe.mitre.org/data/definitions/23.html&quot; class=&quot;uri&quot;&gt;http://cwe.mitre.org/data/definitions/23.html&lt;/a&gt; for more information.&lt;/p&gt;&#x0A;&lt;p&gt;SpotBugs looks only for the most blatant, obvious cases of relative path traversal. If SpotBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more vulnerabilities that SpotBugs doesnât report. If you are concerned about relative path traversal, you should seriously consider using a commercial static analysis or pen-testing tool.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_QQBA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method assigns boolean literal in boolean expression"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Questionable Boolean Assignment"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method assigns a literal boolean value (true or false) to a boolean variable inside an if or while expression. Most probably this was supposed to be a boolean comparison using ==, not an assignment using =.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_QQFL" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Complicated, subtle or wrong increment in for-loop"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Questionable For Loop"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Are you sure this for loop is incrementing the correct variable? It appears that another variable is being initialized and checked by the for loop.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_R0TI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Random value from 0 to 1 is coerced to the integer 0"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "01 To Int"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A random value from 0 to 1 is being coerced to the integer value 0. You probably want to multiply the random value by something else before coercing it to an integer, or use the &lt;code&gt;Random.nextInt(n)&lt;/code&gt; method.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RAI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Array index is out of bounds"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Array Index"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Array operation is performed, but array index is out of bounds, which will result in ArrayIndexOutOfBoundsException at runtime.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Critical"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RAL" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Array length is out of bounds"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Array Length"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Method is called with array parameter and length parameter, but the length is out of bounds. This will result in IndexOutOfBoundsException at runtime.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Critical"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RAO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Array offset is out of bounds"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Array Offset"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Method is called with array parameter and offset parameter, but the offset is out of bounds. This will result in IndexOutOfBoundsException at runtime.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Critical"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RAVOH" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Bad attempt to compute absolute value of signed 32-bit hashcode"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Absolute Value Of Hashcode"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code generates a hashcode and then computes the absolute value of that hashcode. If the hashcode is &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;, then the result will be negative as well (since &lt;code&gt;Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE&lt;/code&gt;).&lt;/p&gt;&#x0A;&lt;p&gt;One out of 2^32 strings have a hashCode of Integer.MIN_VALUE, including âpolygenelubricantsâ âGydZG_â and ââDESIGNING WORKHOUSESâ.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RAVORI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Bad attempt to compute absolute value of signed random integer"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Absolute Value Of Random Int"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code generates a random signed integer and then computes the absolute value of that random integer. If the number returned by the random number generator is &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;, then the result will be negative as well (since &lt;code&gt;Math.abs(Integer.MIN_VALUE) == Integer.MIN_VALUE&lt;/code&gt;). (Same problem arises for long values as well).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RBSFRE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Invalid syntax for regular expression"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Syntax For Regular Expression"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code here uses a regular expression that is invalid according to the syntax for regular expressions. This statement will throw a PatternSyntaxException when executed.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RCCFSRV" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Code checks for specific values returned by compareTo"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Check Compareto For Specific Return Value"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code invoked a compareTo or compare method, and checks to see if the return value is a specific value, such as 1 or -1. When invoking these methods, you should only check the sign of the result, not for any specific non-zero value. While many or most compareTo and compare methods only return -1, 0 or 1, some of them will return other values.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RCE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Exception is caught when Exception is not thrown"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Catch Exception"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method uses a try-catch block that catches Exception objects, but Exception is not thrown within the try block, and RuntimeException is not explicitly caught. It is a common bug pattern to say try { â¦ } catch (Exception e) { something } as a shorthand for catching a number of types of exception each of whose catch blocks is identical, but this construct also accidentally catches RuntimeException as well, masking potential bugs.&lt;/p&gt;&#x0A;&lt;p&gt;A better approach is to either explicitly catch the specific exceptions that are thrown, or to explicitly catch RuntimeException exception, rethrow it, and then catch all non-Runtime Exceptions, as shown below:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;try {&#x0A;    ...&#x0A;} catch (RuntimeException e) {&#x0A;    throw e;&#x0A;} catch (Exception e) {&#x0A;    ... deal with all non-runtime exceptions ...&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RCFPI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method checks to see if result of String.indexOf is positive"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Check For Positive Indexof"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The method invokes String.indexOf and checks to see if the result is positive or non-positive. It is much more typical to check to see if the result is negative or non-negative. It is positive only if the substring checked for occurs at some place other than at the beginning of the String.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RCUFSARE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "File.separator used for regular expression"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Cant Use File Separator As Regular Expression"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code here uses &lt;code&gt;File.separator&lt;/code&gt; where a regular expression is required. This will fail on Windows platforms, where the &lt;code&gt;File.separator&lt;/code&gt; is a backslash, which is interpreted in a regular expression as an escape character. Among other options, you can just use &lt;code&gt;File.separatorChar==&apos;\\&apos; ? &amp;quot;\\\\&amp;quot; : File.separator&lt;/code&gt; instead of &lt;code&gt;File.separator&lt;/code&gt;&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RDJNCR" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method discards result of readLine after checking if it is non-null"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Dont Just Null Check Readline"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The value returned by readLine is discarded after checking to see if the return value is non-null. In almost all situations, if the result is non-null, you will want to use that non-null value. Calling readLine again will give you a different line.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_REARTN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Clone method may return null"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Clone Could Return Null"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This clone method seems to return null in some circumstances, but clone is never allowed to return a null value. If you are convinced this path is unreachable, throw an AssertionError instead.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RENT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Exception created and dropped rather than thrown"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Exception Not Thrown"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code creates an exception (or error) object, but doesnât do anything with it. For example, something like&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;if (x &amp;lt; 0) {&#x0A;    new IllegalArgumentException(&amp;quot;x must be nonnegative&amp;quot;);&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;It was probably the intent of the programmer to throw the created exception:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;if (x &amp;lt; 0) {&#x0A;    throw new IllegalArgumentException(&amp;quot;x must be nonnegative&amp;quot;);&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RNC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method ignores results of InputStream.read()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Not Checked"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "This method ignores the return value of one of the variants of&#x0A;`java.io.InputStream.read()` which can return multiple bytes.Â  If the&#x0A;return value is not checked, the caller will not be able to correctly&#x0A;handle the case where fewer bytes were read than the caller requested.Â &#x0A;This is a particularly insidious kind of bug, because in many programs,&#x0A;reads from input streams usually do read the full amount of data&#x0A;requested, causing the program to fail only sporadically.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RNROC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Negating the result of compareTo()/compare()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Negating Result Of Compareto"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code negatives the return value of a compareTo or compare method. This is a questionable or bad programming practice, since if the return value is Integer.MIN_VALUE, negating the return value wonât negate the sign of the result. You can achieve the same intended result by reversing the order of the operands rather than by negating the results.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RPUP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "&quot;.&quot; or &quot;|&quot; used for regular expression"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Possible Unintended Pattern"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A String function is being invoked and â.â or â|â is being passed to a parameter that takes a regular expression as an argument. Is this what you intended? For example&lt;/p&gt;&#x0A;&lt;ul&gt;&#x0A;&lt;li&gt;s.replaceAll(â.â, â/â) will return a String in which &lt;em&gt;every&lt;/em&gt; character has been replaced by a â/â character&lt;/li&gt;&#x0A;&lt;li&gt;s.split(â.â) &lt;em&gt;always&lt;/em&gt; returns a zero length array of String&lt;/li&gt;&#x0A;&lt;li&gt;âab|cdâ.replaceAll(â|â, â/â) will return â/a/b/|/c/d/â&lt;/li&gt;&#x0A;&lt;li&gt;âab|cdâ.split(â|â) will return array with six (!) elements: [, a, b, |, c, d]&lt;/li&gt;&#x0A;&lt;/ul&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RRC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Suspicious reference comparison"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Ref Comparison"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method compares two reference values using the == or != operator, where the correct way to compare instances of this type is generally with the equals() method. It is possible to create distinct instances that are equal but do not compare as == since they are different objects. Examples of classes which should generally not be compared by reference are java.lang.Integer, java.lang.Float, etc.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RRCBP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Suspicious reference comparison to constant"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Ref Comparison Bad Practice"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method compares a reference value to a constant using the == or != operator, where the correct way to compare instances of this type is generally with the equals() method. It is possible to create distinct instances that are equal but do not compare as == since they are different objects. Examples of classes which should generally not be compared by reference are java.lang.Integer, java.lang.Float, etc.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RRCBPB" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Suspicious reference comparison of Boolean values"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Ref Comparison Bad Practice Boolean"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method compares two Boolean values using the == or != operator. Normally, there are only two Boolean values (Boolean.TRUE and Boolean.FALSE), but it is possible to create other Boolean objects using the &lt;code&gt;new Boolean(b)&lt;/code&gt; constructor. It is best to avoid such objects, but if they do exist, then checking Boolean objects for equality using == or != will give results than are different than you would get using &lt;code&gt;.equals(...)&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RRCONANV" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Redundant comparison of non-null value to null"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Redundant Comparison Of Null And Nonnull Value"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains a reference known to be non-null with another reference known to be null.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RRCT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Repeated conditional tests"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Repeated Conditional Test"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code contains a conditional test is performed twice, one right after the other (e.g., &lt;code&gt;x == 0 || x == 0&lt;/code&gt;). Perhaps the second occurrence is intended to be something else (e.g., &lt;code&gt;x == 0 || y == 0&lt;/code&gt;).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RRCTNV" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Redundant comparison of two null values"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Redundant Comparison Two Null Values"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains a redundant comparison of two references known to both be definitely null.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RRI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class implements same interface as superclass"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Redundant Interfaces"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class declares that it implements an interface that is also implemented by a superclass. This is redundant because once a superclass implements an interface, all subclasses by default also implement this interface. It may point out that the inheritance hierarchy has changed since this class was created, and consideration should be given to the ownership of the interfaceâs implementation.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RRNONV" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Redundant nullcheck of value known to be non-null"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Redundant Nullcheck Of Nonnull Value"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains a redundant check of a known non-null value against the constant null.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RRNWHBAN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Nullcheck of value previously dereferenced"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Redundant Nullcheck Would Have Been A Npe"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A value is checked here to see whether it is null, but this value canât be null because it was previously dereferenced and if it were null a null pointer exception would have occurred at the earlier dereference. Essentially, this code and the previous dereference disagree as to whether this value is allowed to be null. Either the check is redundant or the previous dereference is erroneous.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RROH" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Remainder of hashCode could be negative"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Rem Of Hashcode"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code computes a hashCode, and then computes the remainder of that value modulo another value. Since the hashCode can be negative, the result of the remainder operation can also be negative.&lt;/p&gt;&#x0A;&lt;p&gt;Assuming you want to ensure that the result of your computation is nonnegative, you may need to change your code. If you know the divisor is a power of 2, you can use a bitwise and operator instead (i.e., instead of using &lt;code&gt;x.hashCode()%n&lt;/code&gt;, use &lt;code&gt;x.hashCode()&amp;amp;(n-1)&lt;/code&gt;). This is probably faster than computing the remainder as well. If you donât know that the divisor is a power of 2, take the absolute value of the result of the remainder operation (i.e., use &lt;code&gt;Math.abs(x.hashCode()%n)&lt;/code&gt;).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RRORI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Remainder of 32-bit signed random integer"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Rem Of Random Int"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code generates a random signed integer and then computes the remainder of that value modulo another value. Since the random number can be negative, the result of the remainder operation can also be negative. Be sure this is intended, and strongly consider using the Random.nextInt(int) method instead.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RRS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class&apos;s readObject() method is synchronized"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Readobject Sync"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This serializable class defines a &lt;code&gt;readObject()&lt;/code&gt; which is synchronized.Â  By definition, an object created by deserialization is only reachable by one thread, and thus there is no need for &lt;code&gt;readObject()&lt;/code&gt; to be synchronized.Â  If the &lt;code&gt;readObject()&lt;/code&gt; method itself is causing the object to become visible to another thread, that is an example of very dubious coding style.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RRVI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method ignores return value"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Return Value Ignored"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The return value of this method should be checked. One common cause of this warning is to invoke a method on an immutable object, thinking that it updates the object. For example, in the following code fragment,&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String dateString = getHeaderField(name);&#x0A;dateString.trim();&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;the programmer seems to be thinking that the trim() method will update the String referenced by dateString. But since Strings are immutable, the trim() function returns a new String value, which is being ignored here. The code should be corrected to:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String dateString = getHeaderField(name);&#x0A;dateString = dateString.trim();&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RRVIBP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method ignores exceptional return value"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Return Value Ignored Bad Practice"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method returns a value that is not checked. The return value should be checked since it can indicate an unusual or unexpected function execution. For example, the &lt;code&gt;File.delete()&lt;/code&gt; method returns false if the file could not be successfully deleted (rather than throwing an Exception). If you donât check the result, you wonât notice if the method invocation signals unexpected behavior by returning an atypical return value.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RRVII" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method ignores return value, is this OK?"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Return Value Ignored Inferred"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code calls a method and ignores the return value. The return value is the same type as the type the method is invoked on, and from our analysis it looks like the return value might be important (e.g., like ignoring the return value of &lt;code&gt;String.toLowerCase()&lt;/code&gt;).&lt;/p&gt;&#x0A;&lt;p&gt;We are guessing that ignoring the return value might be a bad idea just from a simple analysis of the body of the method. You can use a &lt;span class=&quot;citation&quot; data-cites=&quot;CheckReturnValue&quot;&gt;@CheckReturnValue&lt;/span&gt; annotation to instruct SpotBugs as to whether ignoring the return value of this method is important or acceptable.&lt;/p&gt;&#x0A;&lt;p&gt;Please investigate this closely to decide whether it is OK to ignore the return value.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RRVINSE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Return value of method without side effect is ignored"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Return Value Ignored No Side Effect"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code calls a method and ignores the return value. However our analysis shows that the method (including its implementations in subclasses if any) does not produce any effect other than return value. Thus this call can be removed.&lt;/p&gt;&#x0A;&lt;p&gt;We are trying to reduce the false positives as much as possible, but in some cases this warning might be wrong. Common false-positive cases include:&lt;/p&gt;&#x0A;&lt;ul&gt;&#x0A;&lt;li&gt;&lt;p&gt;The method is designed to be overridden and produce a side effect in other projects which are out of the scope of the analysis.&lt;/p&gt;&lt;/li&gt;&#x0A;&lt;li&gt;&lt;p&gt;The method is called to trigger the class loading which may have a side effect.&lt;/p&gt;&lt;/li&gt;&#x0A;&lt;li&gt;&lt;p&gt;The method is called just to get some exception.&lt;/p&gt;&lt;/li&gt;&#x0A;&lt;/ul&gt;&#x0A;&lt;p&gt;If you feel that our assumption is incorrect, you can use a &lt;span class=&quot;citation&quot; data-cites=&quot;CheckReturnValue&quot;&gt;@CheckReturnValue&lt;/span&gt; annotation to instruct SpotBugs that ignoring the return value of this method is acceptable.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RRVOPI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Return value of putIfAbsent ignored, value passed to putIfAbsent reused"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Return Value Of Putifabsent Ignored"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The &lt;code&gt;putIfAbsent&lt;/code&gt; method is typically used to ensure that a single value is associated with a given key (the first value for which put if absent succeeds). If you ignore the return value and retain a reference to the value passed in, you run the risk of retaining a value that is not the one that is associated with the key in the map. If it matters which one you use and you use the one that isnât stored in the map, your program will behave incorrectly.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RSI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "String index is out of bounds"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "String Index"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;String method is called and specified string index is out of bounds. This will result in StringIndexOutOfBoundsException at runtime.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Critical"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_RcRNONV" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Redundant nullcheck of value known to be null"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Redundant Nullcheck Of Null Value"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains a redundant check of a known null value against the constant null.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SBF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Non-transient non-serializable instance field in serializable class"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This Serializable class defines a non-primitive instance field which is neither transient, Serializable, or &lt;code&gt;java.lang.Object&lt;/code&gt;, and does not appear to implement the &lt;code&gt;Externalizable&lt;/code&gt; interface or the &lt;code&gt;readObject()&lt;/code&gt; and &lt;code&gt;writeObject()&lt;/code&gt; methods.Â  Objects of this class will not be deserialized correctly if a non-Serializable object is stored in this field.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SBFIC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Non-serializable class has a serializable inner class"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Field Inner Class"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This Serializable class is an inner class of a non-serializable class. Thus, attempts to serialize it will also attempt to associate instance of the outer class with which it is associated, leading to a runtime error.&lt;/p&gt;&#x0A;&lt;p&gt;If possible, making the inner class a static inner class should solve the problem. Making the outer class serializable might also work, but that would mean serializing an instance of the inner class would always also serialize the instance of the outer class, which it often not what you really want.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SBFS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Non-serializable value stored into instance field of a serializable class"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Field Store"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A non-serializable value is stored into a non-transient field of a serializable class.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SBPSA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method attempts to access a prepared statement parameter with index 0"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Prepared Statement Access"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A call to a setXXX method of a prepared statement was made where the parameter index is 0. As parameter indexes start at index 1, this is always a mistake.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SBRA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method attempts to access a result set field with index 0"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Bad Resultset Access"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A call to getXXX or updateXXX methods of a result set was made where the field index is 0. As ResultSet fields start at index 1, this is always a mistake.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SCSBS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Comparator doesn&apos;t implement Serializable"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Comparator Should Be Serializable"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class implements the &lt;code&gt;Comparator&lt;/code&gt; interface. You should consider whether or not it should also implement the &lt;code&gt;Serializable&lt;/code&gt; interface. If a comparator is used to construct an ordered collection such as a &lt;code&gt;TreeMap&lt;/code&gt;, then the &lt;code&gt;TreeMap&lt;/code&gt; will be serializable only if the comparator is also serializable. As most comparators have little or no state, making them serializable is generally easy and good defensive programming.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SCTB" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class too big for analysis"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Class Too Big"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "This class is bigger than can be effectively handled, and was not fully&#x0A;analyzed for errors.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SDSDTSF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Dead store due to switch statement fall through"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Dead Store Due To Switch Fallthrough"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A value stored in the previous switch case is overwritten here due to a switch fall through. It is likely that you forgot to put a break or return at the end of the previous case.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SDSDTSFTT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Dead store due to switch statement fall through to throw"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Dead Store Due To Switch Fallthrough To Throw"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A value stored in the previous switch case is ignored here due to a switch fall through to a place where an exception is thrown. It is likely that you forgot to put a break or return at the end of the previous case.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SFDA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Double assignment of field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Field Double Assignment"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains a double assignment of a field; e.g.&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;int x,y;&#x0A;public void foo() {&#x0A;    x = x = 17;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Assigning to a field twice is useless, and may indicate a logic error or typo.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SFSA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Self assignment of field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Field Self Assignment"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains a self assignment of a field; e.g.&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;int x;&#x0A;public void foo() {&#x0A;    x = x;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Such assignments are useless, and may indicate a logic error or typo.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SFSC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Self comparison of field with itself"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Field Self Comparison"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method compares a field with itself, and may indicate a typo or a logic error. Make sure that you are comparing the right things.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SHMN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class defines hashcode(); should it be hashCode()?"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Lcase Hashcode"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines a method called &lt;code&gt;hashcode()&lt;/code&gt;.Â  This method does not override the &lt;code&gt;hashCode()&lt;/code&gt; method in &lt;code&gt;java.lang.Object&lt;/code&gt;, which is probably what was intended.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SIBFA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Static initializer creates instance before all static final fields assigned"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Instance Before Finals Assigned"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The classâs static initializer creates an instance of the class before all of the static final fields are assigned.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SIC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Serializable inner class"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Inner Class"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This Serializable class is an inner class. Any attempt to serialize it will also serialize the associated outer instance. The outer instance is serializable, so this wonât fail, but it might serialize a lot more data than intended. If possible, making the inner class a static inner class (also known as a nested class) should solve the problem.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SIOC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Unneeded use of currentThread() call, to call interrupted()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Interrupted On Currentthread"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method invokes the Thread.currentThread() call, just to call the interrupted() method. As interrupted() is a static method, is more simple and clear to use Thread.interrupted().&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SIOSCI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Call to static Calendar"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Invoke On Static Calendar Instance"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use. The detector has found a call to an instance of Calendar that has been obtained via a static field. This looks suspicious.&lt;/p&gt;&#x0A;&lt;p&gt;For more information on this see &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579&quot;&gt;JDK Bug #6231579&lt;/a&gt; and &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997&quot;&gt;JDK Bug #6178997&lt;/a&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SIOSDFI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Call to static DateFormat"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Invoke On Static Date Format Instance"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. The detector has found a call to an instance of DateFormat that has been obtained via a static field. This looks suspicious.&lt;/p&gt;&#x0A;&lt;p&gt;For more information on this see &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579&quot;&gt;JDK Bug #6231579&lt;/a&gt; and &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997&quot;&gt;JDK Bug #6178997&lt;/a&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SIOU" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Static Thread.interrupted() method invoked on thread instance"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Interrupted On Unknownthread"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method invokes the Thread.interrupted() method on a Thread object that appears to be a Thread object that is not the current thread. As the interrupted() method is static, the interrupted method will be called on a different object than the one the author intended.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SISBS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Should be a static inner class"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Inner Should Be Static"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class is an inner class, but does not use its embedded reference to the object which created it.Â  This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.Â  If possible, the class should be made static.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SISBSA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Could be refactored into a named static inner class"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Inner Should Be Static Anon"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class is an inner class, but does not use its embedded reference to the object which created it.Â  This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.Â  If possible, the class should be made into a &lt;em&gt;static&lt;/em&gt; inner class. Since anonymous inner classes cannot be marked as static, doing this will require refactoring the inner class so that it is a named inner class.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SISBSNT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Could be refactored into a static inner class"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Inner Should Be Static Needs This"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class is an inner class, but does not use its embedded reference to the object which created it except during construction of the inner object.Â  This reference makes the instances of the class larger, and may keep the reference to the creator object alive longer than necessary.Â  If possible, the class should be made into a &lt;em&gt;static&lt;/em&gt; inner class. Since the reference to the outer object is required during construction of the inner instance, the inner class will need to be refactored so as to pass a reference to the outer instance to the constructor for the inner class.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SLDA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Double assignment of local variable"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Local Double Assignment"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains a double assignment of a local variable; e.g.&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void foo() {&#x0A;    int x,y;&#x0A;    x = x = 17;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Assigning the same value to a variable twice is useless, and may indicate a logic error or typo.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SLSA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Self assignment of local variable"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Local Self Assignment"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains a self assignment of a local variable; e.g.&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void foo() {&#x0A;    int x = 3;&#x0A;    x = x;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Such assignments are useless, and may indicate a logic error or typo.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SLSAIOF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Self assignment of local rather than assignment to field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Local Self Assignment Instead Of Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains a self assignment of a local variable, and there is a field with an identical name. assignment appears to have been ; e.g.&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;    int foo;&#x0A;    public void setFoo(int foo) {&#x0A;        foo = foo;&#x0A;    }&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;The assignment is useless. Did you mean to assign to the field instead?&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SLSC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Self comparison of value with itself"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Local Self Comparison"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method compares a local variable with itself, and may indicate a typo or a logic error. Make sure that you are comparing the right things.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SMMBP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method must be private in order for serialization to work"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Method Must Be Private"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class implements the &lt;code&gt;Serializable&lt;/code&gt; interface, and defines a method for custom serialization/deserialization. But since that method isnât declared private, it will be silently ignored by the serialization/deserialization API.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SNC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method ignores results of InputStream.skip()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Not Checked"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method ignores the return value of &lt;code&gt;java.io.InputStream.skip()&lt;/code&gt; which can skip multiple bytes.Â  If the return value is not checked, the caller will not be able to correctly handle the case where fewer bytes were skipped than the caller requested.Â  This is a particularly insidious kind of bug, because in many programs, skips from input streams usually do skip the full amount of data requested, causing the program to fail only sporadically. With Buffered streams, however, skip() will only skip data in the buffer, and will routinely fail to skip the requested number of bytes.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SNS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "serialVersionUID isn&apos;t final"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Nonfinal Serialversionid"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines a &lt;code&gt;serialVersionUID&lt;/code&gt; field that is not final.Â  The field should be made final if it is intended to specify the version UID for purposes of serialization.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SNSC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class is Serializable but its superclass doesn&apos;t define a void constructor"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "No Suitable Constructor"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class implements the &lt;code&gt;Serializable&lt;/code&gt; interface and its superclass does not. When such an object is deserialized, the fields of the superclass need to be initialized by invoking the void constructor of the superclass. Since the superclass does not have one, serialization and deserialization will fail at runtime.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SNSCFE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class is Externalizable but doesn&apos;t define a void constructor"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "No Suitable Constructor For Externalization"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class implements the &lt;code&gt;Externalizable&lt;/code&gt; interface, but does not define a public void constructor. When Externalizable objects are deserialized, they first need to be constructed by invoking the public void constructor. Since this class does not have one, serialization and deserialization will fail at runtime.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SNSPTE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Nonconstant string passed to execute or addBatch method on an SQL statement"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Nonconstant String Passed To Execute"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The method invokes the execute or addBatch method on an SQL statement with a String that seems to be dynamically generated. Consider using a prepared statement instead. It is more efficient and less vulnerable to SQL injection attacks.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SPRRNI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Private readResolve method not inherited by subclasses"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Private Read Resolve Not Inherited"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines a private readResolve method. Since it is private, it wonât be inherited by subclasses. This might be intentional and OK, but should be reviewed to ensure it is what is intended.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SPSGFNS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "A prepared statement is generated from a nonconstant String"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Prepared Statement Generated From Nonconstant String"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The code creates an SQL prepared statement from a nonconstant String. If unchecked, tainted data from a user is used in building this String, SQL injection could be used to make the prepared statement do something unexpected and undesirable.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SRRIS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "The readResolve method must not be declared as a static method."/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Read Resolve Is Static"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;In order for the readResolve method to be recognized by the serialization mechanism, it must not be declared as a static method.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SRRMRO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "The readResolve method must be declared with a return type of Object."/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Read Resolve Must Return Object"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;In order for the readResolve method to be recognized by the serialization mechanism, it must be declared to have a return type of Object.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SSBS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Unread field: should this field be static?"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Should Be Static"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class contains an instance final field that is initialized to a compile-time static value. Consider making the field static.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SSCI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Static Calendar field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Static Calendar Instance"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Even though the JavaDoc does not contain a hint about it, Calendars are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see random ArrayIndexOutOfBoundsExceptions or IndexOutOfBoundsExceptions in sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate().&lt;/p&gt;&#x0A;&lt;p&gt;You may also experience serialization problems.&lt;/p&gt;&#x0A;&lt;p&gt;Using an instance field is recommended.&lt;/p&gt;&#x0A;&lt;p&gt;For more information on this see &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579&quot;&gt;JDK Bug #6231579&lt;/a&gt; and &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997&quot;&gt;JDK Bug #6178997&lt;/a&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SSI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Unnecessary type check done using instanceof operator"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Superfluous Instanceof"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Type check performed using the instanceof operator where it can be statically determined whether the object is of the type requested.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SSIC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Constructor invokes Thread.start()"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Start In Ctor"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The constructor starts a thread. This is likely to be wrong if the class is ever extended/subclassed, since the thread will be started before the subclass constructor is started.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SSMIIST" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Certain swing methods needs to be invoked in Swing thread"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Swing Methods Invoked In Swing Thread"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;(&lt;a href=&quot;http://web.archive.org/web/20090526170426/http://java.sun.com/developer/JDCTechTips/2003/tt1208.html&quot;&gt;From JDC Tech Tip&lt;/a&gt;): The Swing methods show(), setVisible(), and pack() will create the associated peer for the frame. With the creation of the peer, the system creates the event dispatch thread. This makes things problematic because the event dispatch thread could be notifying listeners while pack and validate are still processing. This situation could result in two threads going through the Swing component-based GUI â itâs a serious flaw that could result in deadlocks or other related threading issues. A pack call causes components to be realized. As they are being realized (that is, not necessarily visible), they could trigger listener notification on the event dispatch thread.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SSOF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method spins on field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Spin On Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method spins in a loop which reads a field.Â  The compiler may legally hoist the read out of the loop, turning the code into an infinite loop.Â  The class should be changed so it uses proper synchronization (including wait and notify calls).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SSSDFI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Static DateFormat"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Static Simple Date Format Instance"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;As the JavaDoc states, DateFormats are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application.&lt;/p&gt;&#x0A;&lt;p&gt;You may also experience serialization problems.&lt;/p&gt;&#x0A;&lt;p&gt;Using an instance field is recommended.&lt;/p&gt;&#x0A;&lt;p&gt;For more information on this see &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6231579&quot;&gt;JDK Bug #6231579&lt;/a&gt; and &lt;a href=&quot;http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6178997&quot;&gt;JDK Bug #6178997&lt;/a&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SSWLH" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method calls Thread.sleep() with a lock held"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Sleep With Lock Held"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method calls Thread.sleep() with a lock held. This may result in very poor performance and scalability, or a deadlock, since other threads may be waiting to acquire the lock. It is a much better idea to call wait() on the lock, which releases the lock and allows other threads to run.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_STDE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Deadly embrace of non-static inner class and thread local"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Threadlocal Deadly Embrace"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class is an inner class, but should probably be a static inner class. As it is, there is a serious danger of a deadly embrace between the inner class and the thread local in the outer class. Because the inner class isnât static, it retains a reference to the outer class. If the thread local contains a reference to an instance of the inner class, the inner and outer instance will both be reachable and not eligible for garbage collection.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_STFNR" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Transient field that isn&apos;t set by deserialization."/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Transient Field Not Restored"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class contains a field that is updated at multiple places in the class, thus it seems to be part of the state of the class. However, since the field is marked as transient and not set in readObject or readResolve, it will contain the default value in any deserialized instance of the class.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_STFONC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Transient field of class that isn&apos;t Serializable."/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Transient Field Of Nonserializable Class"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The field is marked as transient, but the class isnât Serializable, so marking it as transient has absolutely no effect. This may be leftover marking from a previous version of the code in which the class was transient, or it may indicate a misunderstanding of how serialization works.&lt;/p&gt;&#x0A;&lt;p&gt;&lt;em&gt;This bug is reported only if special option &lt;code&gt;reportTransientFieldOfNonSerializableClass&lt;/code&gt; is set.&lt;/em&gt;&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_STS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method invokes toString() method on a String"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "String Tostring"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Calling &lt;code&gt;String.toString()&lt;/code&gt; is just a redundant operation. Just use the String.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SWTSFIM" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Write to static field from instance method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Write To Static From Instance Method"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This instance method writes to a static field. This is tricky to get correct if multiple instances are being manipulated, and generally bad practice.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SaFSC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Nonsensical self computation involving a field (e.g., x &amp; x)"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Field Self Computation"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method performs a nonsensical computation of a field with another reference to the same field (e.g., x&amp;amp;x or x-x). Because of the nature of the computation, this operation doesnât seem to make sense, and may indicate a typo or a logic error. Double check the computation.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SaLSC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Nonsensical self computation involving a variable (e.g., x &amp; x)"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Local Self Computation"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method performs a nonsensical computation of a local variable with another reference to the same variable (e.g., x&amp;amp;x or x-x). Because of the nature of the computation, this operation doesnât seem to make sense, and may indicate a typo or a logic error. Double check the computation.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SeNS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "serialVersionUID isn&apos;t long"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Nonlong Serialversionid"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines a &lt;code&gt;serialVersionUID&lt;/code&gt; field that is not long.Â  The field should be made long if it is intended to specify the version UID for purposes of serialization.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_SeNoS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "serialVersionUID isn&apos;t static"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Nonstatic Serialversionid"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class defines a &lt;code&gt;serialVersionUID&lt;/code&gt; field that is not static.Â  The field should be made static if it is intended to specify the version UID for purposes of serialization.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_TAVUWNR" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Value annotated as carrying a type qualifier used where a value that must not carry that qualifier is required"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Always Value Used Where Never Required"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A value specified as carrying a type qualifier annotation is consumed in a location or locations requiring that the value not carry that annotation.&lt;/p&gt;&#x0A;&lt;p&gt;More precisely, a value annotated with a type qualifier specifying when=ALWAYS is guaranteed to reach a use or uses where the same type qualifier specifies when=NEVER.&lt;/p&gt;&#x0A;&lt;p&gt;For example, say that &lt;span class=&quot;citation&quot; data-cites=&quot;NonNegative&quot;&gt;@NonNegative&lt;/span&gt; is a nickname for the type qualifier annotation &lt;span class=&quot;citation&quot; data-cites=&quot;Negative&quot;&gt;@Negative&lt;/span&gt;(when=When.NEVER). The following code will generate this warning because the return statement requires a &lt;span class=&quot;citation&quot; data-cites=&quot;NonNegative&quot;&gt;@NonNegative&lt;/span&gt; value, but receives one that is marked as &lt;span class=&quot;citation&quot; data-cites=&quot;Negative&quot;&gt;@Negative&lt;/span&gt;.&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public @NonNegative Integer example(@Negative Integer value) {&#x0A;    return value;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_TCVWITQ" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Comparing values with incompatible type qualifiers"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Comparing Values With Incompatible Type Qualifiers"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A value specified as carrying a type qualifier annotation is compared with a value that doesnât ever carry that qualifier.&lt;/p&gt;&#x0A;&lt;p&gt;More precisely, a value annotated with a type qualifier specifying when=ALWAYS is compared with a value that where the same type qualifier specifies when=NEVER.&lt;/p&gt;&#x0A;&lt;p&gt;For example, say that &lt;span class=&quot;citation&quot; data-cites=&quot;NonNegative&quot;&gt;@NonNegative&lt;/span&gt; is a nickname for the type qualifier annotation &lt;span class=&quot;citation&quot; data-cites=&quot;Negative&quot;&gt;@Negative&lt;/span&gt;(when=When.NEVER). The following code will generate this warning because the return statement requires a &lt;span class=&quot;citation&quot; data-cites=&quot;NonNegative&quot;&gt;@NonNegative&lt;/span&gt; value, but receives one that is marked as &lt;span class=&quot;citation&quot; data-cites=&quot;Negative&quot;&gt;@Negative&lt;/span&gt;.&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean example(@Negative Integer value1, @NonNegative Integer value2) {&#x0A;    return value1.equals(value2);&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_TEUSVRAS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Value required to have type qualifier, but marked as unknown"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Explicit Unknown Source Value Reaches Always Sink"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A value is used in a way that requires it to be always be a value denoted by a type qualifier, but there is an explicit annotation stating that it is not known where the value is required to have that type qualifier. Either the usage or the annotation is incorrect.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_TEUSVRNS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Value required to not have type qualifier, but marked as unknown"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Explicit Unknown Source Value Reaches Never Sink"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A value is used in a way that requires it to be never be a value denoted by a type qualifier, but there is an explicit annotation stating that it is not known where the value is prohibited from having that type qualifier. Either the usage or the annotation is incorrect.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_TMSVRAS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Value that might not carry a type qualifier is always used in a way requires that type qualifier"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Maybe Source Value Reaches Always Sink"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A value that is annotated as possibility not being an instance of the values denoted by the type qualifier, and the value is guaranteed to be used in a way that requires values denoted by that type qualifier.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_TMSVRNS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Value that might carry a type qualifier is always used in a way prohibits it from having that type qualifier"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Maybe Source Value Reaches Never Sink"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A value that is annotated as possibility being an instance of the values denoted by the type qualifier, and the value is guaranteed to be used in a way that prohibits values denoted by that type qualifier.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_TNVUWAR" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Value annotated as never carrying a type qualifier used where value carrying that qualifier is required"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Never Value Used Where Always Required"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A value specified as not carrying a type qualifier annotation is guaranteed to be consumed in a location or locations requiring that the value does carry that annotation.&lt;/p&gt;&#x0A;&lt;p&gt;More precisely, a value annotated with a type qualifier specifying when=NEVER is guaranteed to reach a use or uses where the same type qualifier specifies when=ALWAYS.&lt;/p&gt;&#x0A;&lt;p&gt;TODO: example&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_TTLW" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Wait with two locks held"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Two Lock Wait"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Waiting on a monitor while two locks are held may cause deadlock. Â  Performing a wait only releases the lock on the object being waited on, not any other locks. Â  This not necessarily a bug, but is worth examining closely.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_TUVUWASR" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Value without a type qualifier used where a value is required to have that qualifier"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unknown Value Used Where Always Strictly Required"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A value is being used in a way that requires the value be annotation with a type qualifier. The type qualifier is strict, so the tool rejects any values that do not have the appropriate annotation.&lt;/p&gt;&#x0A;&lt;p&gt;To coerce a value to have a strict annotation, define an identity function where the return value is annotated with the strict annotation. This is the only way to turn a non-annotated value into a value with a strict type qualifier annotation.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UFNIIC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Field not initialized in constructor but dereferenced without null check"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Field Not Initialized In Constructor"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This field is never initialized within any constructor, and is therefore could be null after the object is constructed. Elsewhere, it is loaded and dereferenced without a null check. This could be a either an error or a questionable design, since it means a null pointer exception will be generated if that field is dereferenced before being initialized.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UIUG" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Usage of GetResource may be unsafe if class is extended"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Inheritance Unsafe Getresource"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Calling &lt;code&gt;this.getClass().getResource(...)&lt;/code&gt; could give results other than expected if this class is extended by a class in another package.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_ULWCC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Consider using Locale parameterized version of invoked method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Convert Case"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;A String is being converted to upper or lowercase, using the platformâs default encoding. This may result in improper conversions when used with international characters. Use the&lt;/p&gt;&#x0A;&lt;ul&gt;&#x0A;&lt;li&gt;String.toUpperCase( Locale l )&lt;/li&gt;&#x0A;&lt;li&gt;String.toLowerCase( Locale l )&lt;/li&gt;&#x0A;&lt;/ul&gt;&#x0A;&lt;p&gt;versions instead.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UNCIE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "equals() method does not check for null argument"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Equals Should Handle Null Argument"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This implementation of equals(Object) violates the contract defined by java.lang.Object.equals() because it does not check for null being passed as the argument. All equals() methods should return false if passed a null value.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UNF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Field only ever set to null"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Null Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;All writes to this field are of the constant value null, and thus all reads of the field will return null. Check for errors, or remove it if it is useless.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UPF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Useless increment in return statement"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Dead Local Increment In Return"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This statement has a return such as &lt;code&gt;return x++;&lt;/code&gt;. A postfix increment/decrement does not impact the value of the expression, so this increment/decrement has no effect. Please verify that this statement does the right thing.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_USBFSA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method concatenates strings using + in a loop"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Use Stringbuffer Concatenation"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;The method seems to be building a String using concatenation in a loop. In each iteration, the String is converted to a StringBuffer/StringBuilder, appended to, and converted back to a String. This can lead to a cost quadratic in the number of iterations, as the growing string is recopied in each iteration.&lt;/p&gt;&#x0A;&lt;p&gt;Better performance can be obtained by using a StringBuffer (or StringBuilder in Java 1.5) explicitly.&lt;/p&gt;&#x0A;&lt;p&gt;For example:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// This is bad&#x0A;String s = &amp;quot;&amp;quot;;&#x0A;for (int i = 0; i &amp;lt; field.length; ++i) {&#x0A;    s = s + field[i];&#x0A;}&#x0A;&#x0A;// This is better&#x0A;StringBuffer buf = new StringBuffer();&#x0A;for (int i = 0; i &amp;lt; field.length; ++i) {&#x0A;    buf.append(field[i]);&#x0A;}&#x0A;String s = buf.toString();&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_USSUG" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Unsynchronized get method, synchronized set method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Sync Set Unsync Get"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class contains similarly-named get and set methods where the set method is synchronized and the get method is not.Â  This may result in incorrect behavior at runtime, as callers of the get method will not necessarily see a consistent state for the object.Â  The get method should be made synchronized.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UUAM" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Abstract Method is already defined in implemented interface"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Useless Abstract Method"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "This abstract method is already defined in an interface that is&#x0A;implemented by this abstract class. This method can be removed, as it&#x0A;provides no additional value.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UUCF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Useless control flow"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Useless Control Flow"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains a useless control flow statement, where control flow continues onto the same place regardless of whether or not the branch is taken. For example, this is caused by having an empty statement block for an &lt;code&gt;if&lt;/code&gt; statement:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;if (argv.length == 0) {&#x0A;    // TODO: handle this case&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UUCFNL" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Useless control flow to next line"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Useless Control Flow Next Line"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains a useless control flow statement in which control flow follows to the same or following line regardless of whether or not the branch is taken. Often, this is caused by inadvertently using an empty statement as the body of an &lt;code&gt;if&lt;/code&gt; statement, e.g.:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;if (argv.length == 1);&#x0A;    System.out.println(&amp;quot;Hello, &amp;quot; + argv[0]);&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UUCT" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Condition has no effect due to the variable type"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Useless Condition Type"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This condition always produces the same result due to the type range of the involved variable. Probably something else was meant or the condition can be removed.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UUCo" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Condition has no effect"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Useless Condition"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This condition always produces the same result as the value of the involved variable that was narrowed before. Probably something else was meant or the condition can be removed.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UUF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Unread field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unread Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This field is never read.Â  Consider removing it from the class.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UUL" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method does not release lock on all paths"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unreleased Lock"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method acquires a JSR-166 (&lt;code&gt;java.util.concurrent&lt;/code&gt;) lock, but does not release it on all paths out of the method. In general, the correct idiom for using a JSR-166 lock is:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;Lock l = ...;&#x0A;l.lock();&#x0A;try {&#x0A;    // do something&#x0A;} finally {&#x0A;    l.unlock();&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UULEP" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method does not release lock on all exception paths"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unreleased Lock Exception Path"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method acquires a JSR-166 (&lt;code&gt;java.util.concurrent&lt;/code&gt;) lock, but does not release it on all exception paths out of the method. In general, the correct idiom for using a JSR-166 lock is:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;Lock l = ...;&#x0A;l.lock();&#x0A;try {&#x0A;    // do something&#x0A;} finally {&#x0A;    l.unlock();&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UUM" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method calls static Math class method on a constant value"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unnecessary Math"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method uses a static method from java.lang.Math on a constant value. This methodâs result in this case, can be determined statically, and is faster and sometimes more accurate to just use the constant. Methods detected are:&lt;/p&gt;&#x0A;&lt;table&gt;&#x0A;&lt;thead&gt;&#x0A;&lt;tr class=&quot;header&quot;&gt;&#x0A;&lt;th style=&quot;text-align: left;&quot;&gt;Method&lt;/th&gt;&#x0A;&lt;th style=&quot;text-align: left;&quot;&gt;Parameter&lt;/th&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;/thead&gt;&#x0A;&lt;tbody&gt;&#x0A;&lt;tr class=&quot;odd&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;abs&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;-any-&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;even&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;acos&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;odd&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;asin&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;even&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;atan&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;odd&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;atan2&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;even&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;cbrt&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;odd&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;ceil&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;-any-&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;even&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;cos&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;odd&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;cosh&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;even&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;exp&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;odd&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;expm1&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;even&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;floor&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;-any-&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;odd&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;log&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;even&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;log10&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;odd&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;rint&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;-any-&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;even&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;round&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;-any-&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;odd&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;sin&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;even&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;sinh&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;odd&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;sqrt&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;even&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;tan&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;odd&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;tanh&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;even&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;toDegrees&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0 or 1.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;tr class=&quot;odd&quot;&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;toRadians&lt;/td&gt;&#x0A;&lt;td style=&quot;text-align: left;&quot;&gt;0.0&lt;/td&gt;&#x0A;&lt;/tr&gt;&#x0A;&lt;/tbody&gt;&#x0A;&lt;/table&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UUMOAC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Uncallable method defined in anonymous class"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Uncallable Method Of Anonymous Class"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This anonymous class defines a method that is not directly invoked and does not override a method in a superclass. Since methods in other classes cannot directly invoke methods declared in an anonymous class, it seems that this method is uncallable. The method might simply be dead code, but it is also possible that the method is intended to override a method declared in a superclass, and due to a typo or other error the method does not, in fact, override the method it is intended to.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UUO" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Useless object created"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Useless Object"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Our analysis shows that this object is useless. Itâs created and modified, but its value never go outside of the method or produce any side-effect. Either there is a mistake and object was intended to be used or it can be removed.&lt;/p&gt;&#x0A;&lt;p&gt;This analysis rarely produces false-positives. Common false-positive cases include:&lt;/p&gt;&#x0A;&lt;ul&gt;&#x0A;&lt;li&gt;&lt;p&gt;This object used to implicitly throw some obscure exception.&lt;/p&gt;&lt;/li&gt;&#x0A;&lt;li&gt;&lt;p&gt;This object used as a stub to generalize the code.&lt;/p&gt;&lt;/li&gt;&#x0A;&lt;li&gt;&lt;p&gt;This object used to hold strong references to weak/soft-referenced objects.&lt;/p&gt;&lt;/li&gt;&#x0A;&lt;/ul&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UUOS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Useless object created on stack"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Useless Object Stack"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This object is created just to perform some modifications which donât have any side-effect. Probably something else was meant or the object can be removed.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UUPM" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Private method is never called"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Uncalled Private Method"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This private method is never called. Although it is possible that the method will be invoked through reflection, it is more likely that the method is never used, and should be removed.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UUPOPF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Unread public/protected field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unread Public Or Protected Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This field is never read.Â  The field is public or protected, so perhaps it is intended to be used with classes not seen as part of the analysis. If not, consider removing it from the class.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UUR" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Uninitialized read of field in constructor"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Uninit Read"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This constructor reads a field which has not yet been assigned a value.Â  This is often caused when the programmer mistakenly uses the field instead of one of the constructorâs parameters.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UURCFSC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Uninitialized read of field method called from constructor of superclass"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Uninit Read Called From Super Constructor"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method is invoked in the constructor of the superclass. At this point, the fields of the class have not yet initialized.&lt;/p&gt;&#x0A;&lt;p&gt;To make this more concrete, consider the following classes:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;abstract class A {&#x0A;    int hashCode;&#x0A;    abstract Object getValue();&#x0A;&#x0A;    A() {&#x0A;        hashCode = getValue().hashCode();&#x0A;    }&#x0A;}&#x0A;&#x0A;class B extends A {&#x0A;    Object value;&#x0A;&#x0A;    B(Object v) {&#x0A;        this.value = v;&#x0A;    }&#x0A;&#x0A;    Object getValue() {&#x0A;        return value;&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;When a &lt;code&gt;B&lt;/code&gt; is constructed, the constructor for the &lt;code&gt;A&lt;/code&gt; class is invoked &lt;em&gt;before&lt;/em&gt; the constructor for &lt;code&gt;B&lt;/code&gt; sets &lt;code&gt;value&lt;/code&gt;. Thus, when the constructor for &lt;code&gt;A&lt;/code&gt; invokes &lt;code&gt;getValue&lt;/code&gt;, an uninitialized value is read for &lt;code&gt;value&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UUSM" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method superfluously delegates to parent class method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Useless Subclass Method"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "This derived method merely calls the same superclass method passing in&#x0A;the exact parameters received. This method can be removed, as it&#x0A;provides no additional value.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UUVM" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Useless non-empty void method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Useless Void Method"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Our analysis shows that this non-empty void method does not actually perform any useful work. Please check it: probably thereâs a mistake in its code or its body can be fully removed.&lt;/p&gt;&#x0A;&lt;p&gt;We are trying to reduce the false positives as much as possible, but in some cases this warning might be wrong. Common false-positive cases include:&lt;/p&gt;&#x0A;&lt;ul&gt;&#x0A;&lt;li&gt;The method is intended to trigger loading of some class which may have a side effect.&lt;/li&gt;&#x0A;&lt;li&gt;The method is intended to implicitly throw some obscure exception.&lt;/li&gt;&#x0A;&lt;/ul&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UUW" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Unconditional wait"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Uncond Wait"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains a call to &lt;code&gt;java.lang.Object.wait()&lt;/code&gt; which is not guarded by conditional control flow.Â  The code should verify that condition it intends to wait for is not already satisfied before calling wait; any previous notifications will be ignored.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UWOC" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method invokes inefficient Number constructor; use static valueOf instead"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Number Ctor"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;Using &lt;code&gt;new Integer(int)&lt;/code&gt; is guaranteed to always result in a new object whereas &lt;code&gt;Integer.valueOf(int)&lt;/code&gt; allows caching of values to be done by the compiler, class library, or JVM. Using of cached values avoids object allocation and the code will be faster.&lt;/p&gt;&#x0A;&lt;p&gt;Values between -128 and 127 are guaranteed to have corresponding cached instances and using &lt;code&gt;valueOf&lt;/code&gt; is approximately 3.5 times faster than using constructor. For values outside the constant range the performance of both styles is the same.&lt;/p&gt;&#x0A;&lt;p&gt;Unless the class must be compatible with JVMs predating Java 1.5, use either autoboxing or the &lt;code&gt;valueOf()&lt;/code&gt; method when creating instances of &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Short&lt;/code&gt;, &lt;code&gt;Character&lt;/code&gt;, and &lt;code&gt;Byte&lt;/code&gt;.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UuUF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Unused field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unused Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This field is never used.Â  Consider removing it from the class.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UuUPOPF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Unused public or protected field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unused Public Or Protected Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This field is never used.Â  The field is public or protected, so perhaps it is intended to be used with classes not seen as part of the analysis. If not, consider removing it from the class.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UwUF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Unwritten field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unwritten Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This field is never written.Â  All reads of it will return the default value. Check for errors (should it have been initialized?), or remove it if it is useless.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_UwUPOPF" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Unwritten public or protected field"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unwritten Public Or Protected Field"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;No writes were seen to this public/protected field.Â  All reads of it will return the default value. Check for errors (should it have been initialized?), or remove it if it is useless.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_VFSUN" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Format string should use %n rather than \n"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Format String Uses Newline"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This format string includes a newline character (\n). In format strings, it is generally preferable to use %n, which will produce the platform-specific line separator.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_VPAPTOV" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Primitive array passed to function expecting a variable number of object arguments"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Primitive Array Passed To Object Vararg"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code passes a primitive array to a function that takes a variable number of object arguments. This creates an array of length one to hold the primitive array and passes it to the function.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_VUR" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class makes reference to unresolvable class or method"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Unresolvable Reference"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "false"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "This class makes a reference to a class or method that can not be&#x0A;resolved using against the libraries it is being analyzed with.&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_VVI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "An increment to a volatile field isn&apos;t atomic"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Volatile Increment"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code increments a volatile field. Increments of volatile fields arenât atomic. If more than one thread is incrementing the field at the same time, increments could be lost.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_VVRTA" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "A volatile reference to an array doesn&apos;t treat the array elements as volatile"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Volatile Reference To Array"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This declares a volatile reference to an array, which might not be what you want. With a volatile reference to an array, reads and writes of the reference to the array are treated as volatile, but the array elements are non-volatile. To get volatile array elements, you will need to use one of the atomic array classes in java.util.concurrent (provided in Java 5.0).&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_WANIL" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Condition.await() not in loop"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Await Not In Loop"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains a call to &lt;code&gt;java.util.concurrent.await()&lt;/code&gt; (or variants) which is not in a loop.Â  If the object is used for multiple conditions, the condition the caller intended to wait for might not be the one that actually occurred.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_WNIL" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Wait not in loop"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Not In Loop"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method contains a call to &lt;code&gt;java.lang.Object.wait()&lt;/code&gt; which is not in a loop.Â  If the monitor is used for multiple conditions, the condition the caller intended to wait for might not be the one that actually occurred.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_WUGRTCL" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Synchronization on getClass rather than class literal"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Using Getclass Rather Than Class Literal"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This instance method synchronizes on &lt;code&gt;this.getClass()&lt;/code&gt;. If this class is subclassed, subclasses will synchronize on the class object for the subclass, which isnât likely what was intended. For example, consider this code from java.awt.Label:&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private static final String base = &amp;quot;label&amp;quot;;&#x0A;private static int nameCounter = 0;&#x0A;&#x0A;String constructComponentName() {&#x0A;    synchronized (getClass()) {&#x0A;        return base + nameCounter++;&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Subclasses of &lt;code&gt;Label&lt;/code&gt; wonât synchronize on the same subclass, giving rise to a datarace. Instead, this code should be synchronizing on &lt;code&gt;Label.class&lt;/code&gt;&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private static final String base = &amp;quot;label&amp;quot;;&#x0A;private static int nameCounter = 0;&#x0A;&#x0A;String constructComponentName() {&#x0A;    synchronized (Label.class) {&#x0A;        return base + nameCounter++;&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Bug pattern contributed by Jason Mehrens&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_WWMI" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Inefficient use of keySet iterator instead of entrySet iterator"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Wrong Map Iterator"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method accesses the value of a Map entry, using a key that was retrieved from a keySet iterator. It is more efficient to use an iterator on the entrySet of the map, to avoid the Map.get(key) lookup.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_WWS" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Class&apos;s writeObject() method is synchronized but nothing else is"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Writeobject Sync"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This class has a &lt;code&gt;writeObject()&lt;/code&gt; method which is synchronized; however, no other method of the class is synchronized.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_XRPTJW" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "JSP reflected cross site scripting vulnerability"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Request Parameter To Jsp Writer"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code directly writes an HTTP parameter to JSP output, which allows for a cross site scripting vulnerability. See &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot; class=&quot;uri&quot;&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt; for more information.&lt;/p&gt;&#x0A;&lt;p&gt;SpotBugs looks only for the most blatant, obvious cases of cross site scripting. If SpotBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more cross site scripting vulnerabilities that SpotBugs doesnât report. If you are concerned about cross site scripting, you should seriously consider using a commercial static analysis or pen-testing tool.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_XRPTSE" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Servlet reflected cross site scripting vulnerability in error page"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Request Parameter To Send Error"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code directly writes an HTTP parameter to a Server error page (using HttpServletResponse.sendError). Echoing this untrusted input allows for a reflected cross site scripting vulnerability. See &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot; class=&quot;uri&quot;&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt; for more information.&lt;/p&gt;&#x0A;&lt;p&gt;SpotBugs looks only for the most blatant, obvious cases of cross site scripting. If SpotBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more cross site scripting vulnerabilities that SpotBugs doesnât report. If you are concerned about cross site scripting, you should seriously consider using a commercial static analysis or pen-testing tool.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_XRPTSW" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Servlet reflected cross site scripting vulnerability"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Request Parameter To Servlet Writer"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This code directly writes an HTTP parameter to Servlet output, which allows for a reflected cross site scripting vulnerability. See &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-site_scripting&quot; class=&quot;uri&quot;&gt;http://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt; for more information.&lt;/p&gt;&#x0A;&lt;p&gt;SpotBugs looks only for the most blatant, obvious cases of cross site scripting. If SpotBugs found &lt;em&gt;any&lt;/em&gt;, you &lt;em&gt;almost certainly&lt;/em&gt; have more cross site scripting vulnerabilities that SpotBugs doesnât report. If you are concerned about cross site scripting, you should seriously consider using a commercial static analysis or pen-testing tool.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Major"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FB_XXFB" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Method directly allocates a specific implementation of xml interfaces"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Xml Factory Bypass"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "&lt;p&gt;This method allocates a specific implementation of an xml interface. It is preferable to use the supplied factory classes to create these objects so that the implementation can be changed at runtime. See&lt;/p&gt;&#x0A;&lt;ul&gt;&#x0A;&lt;li&gt;javax.xml.parsers.DocumentBuilderFactory&lt;/li&gt;&#x0A;&lt;li&gt;javax.xml.parsers.SAXParserFactory&lt;/li&gt;&#x0A;&lt;li&gt;javax.xml.transform.TransformerFactory&lt;/li&gt;&#x0A;&lt;li&gt;org.w3c.dom.Document.create&lt;em&gt;XXXX&lt;/em&gt;&lt;/li&gt;&#x0A;&lt;/ul&gt;&#x0A;&lt;p&gt;for details.&lt;/p&gt;&#x0A;"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Info"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "FindBugs" type = "RulTool">
      <edge type = "RulTree" direction = "directional" to = "FB_ACEJFE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ACEZFE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ACF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ADLIBDC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_AOSOCA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_APFIFC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BAOSB">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BAZ">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BBAC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BBCTAC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BBCTCC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BBIU">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BBIUTPC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BBOA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BEMSWFAO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BIC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BID">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BIOSB">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BSC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BSCHB">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BUACFTO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BUC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BUCORV">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BUIR">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BVI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BWAP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BcII">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_BiI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_CAS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_CCAES">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_CCAF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_CCAL">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_CCAR">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_CCD">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_CCEWTA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_CCIF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_CCRMV">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_CICBNC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_CNC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_CRCV">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_CSNO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ClMMIC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DAINVTR">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DAWO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DBC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DBM">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DBMOU">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DBPFC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DBPFP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DBPT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DCCIDP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DCDP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DCL">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DCNFH">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DCOU">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DCSNCT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DCTR">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DDB">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DDE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DDIDP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DDLS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DDLSIR">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DDLSON">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DDLSSF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DDSC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DDSOCL">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DEDP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DESMREO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DFATCMSOSTPE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DFNC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DHAF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DIHOA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DIMM">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DITOA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DITOAA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DLBTDIOI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DLNLISS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DMD">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DMI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DMWOC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DNCGCE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DNCSE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DNOW">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DNUT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DNVN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DOI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DPC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DRFOE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DRUOO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DSC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DSOB">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DSOBP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DSOSC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DSOUBP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DSTPEWZCT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DSVC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DUM">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DURTCC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DUS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DUT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DVCTEM">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DVSCC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_DmD">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EAAN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EAF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EAS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EAT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EBAC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ECCN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ECFONCWT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ECPSWE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ECSWE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ECUOE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EDDEFE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EDOE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EER">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EESR">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EGACC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EIAC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ENA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EOENS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EONO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EOUO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ESB">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ESNO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ESUO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EU">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EUCAI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EUI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EUT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EUTUPE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_EiER">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_FDNCSF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_FFNF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_FFONF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_FFPE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_FMEW">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_FMUFP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_FNS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_FSBP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_FU">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_FUW">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_GUT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_GUTIGC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_HENH">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_HEUH">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_HHNE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_HHSSC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_HHUOE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_HIEUH">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_HRPTC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_HRPTHH">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_HSDHOUC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_HUOUC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IACCO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IAIOIOOM">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IAMIFRM">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IATOOS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IBCFO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IBCWIV">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IBCWNV">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IBCWSB">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IBRB1">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IBSA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IBSM">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ICATI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IDCI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IEGLIL">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IFNG">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_II2LAI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IIC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IICTD">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IICTDPTC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IICTFPTR">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IIIO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IIL">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IILIO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IIMA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IIMCTL">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IIRL">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IIS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IISC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IMROI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_INSE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_INT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IPCIL">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IPCILI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IPIDBO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IPSIL">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IQURS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ISNS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ISUSDI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ITGC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ITNS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IVBO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_IVC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_JDAIIT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_JFIFIIC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_JJCWRTA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_JJLM">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_JJUM">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_JSONSOIS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_JUSS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_LLIS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_LLIUS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_LLLDTWR">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MBIS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MCBF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MCMF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MEFS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MFP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MMA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MMC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MMCP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MMEF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MMH">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MMMF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MMN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MMSF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MMW">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MOP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MRIA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MSBF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MSBRTBF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MSOFTGCTF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MSOUF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MSSIF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MSVUID">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MWSNAEC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MeNC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_MtSSIF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NAMBN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NAN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NANE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NBE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NBRN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NCN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NCNE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NDNSC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NDORV">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NFKUAI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NFKUAMI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NFNC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NGD">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NGDOEP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NIDOR">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NLOKNV">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NLT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NMPTA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NMRRA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NNFNIIC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NNI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NNN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NNNN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NNOSP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NNOSPE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NNOSPFRV">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NNOSPMBI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NNPD">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NNPDATD">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NNPDN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NNPV">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NNRV">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NNSC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NORN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NPMBNBMAN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NSANCF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NSINF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NSSNAI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NSSNAS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NTCRN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NUF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NUPOPF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NVC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NVCI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NWP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_NWPI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_OMMIS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_OODR">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_OODREP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_OOS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_OOSEP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_OTAC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_OUO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_OUOEE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_PAPT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_PCI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_PDREOII">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_PPS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_PPZLA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_PRPT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_QQBA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_QQFL">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_R0TI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RAI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RAL">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RAO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RAVOH">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RAVORI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RBSFRE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RCCFSRV">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RCE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RCFPI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RCUFSARE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RDJNCR">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_REARTN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RENT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RNC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RNROC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RPUP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RRC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RRCBP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RRCBPB">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RRCONANV">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RRCT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RRCTNV">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RRI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RRNONV">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RRNWHBAN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RROH">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RRORI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RRS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RRVI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RRVIBP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RRVII">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RRVINSE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RRVOPI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RSI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_RcRNONV">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SBF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SBFIC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SBFS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SBPSA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SBRA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SCSBS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SCTB">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SDSDTSF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SDSDTSFTT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SFDA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SFSA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SFSC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SHMN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SIBFA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SIC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SIOC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SIOSCI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SIOSDFI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SIOU">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SISBS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SISBSA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SISBSNT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SLDA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SLSA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SLSAIOF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SLSC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SMMBP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SNC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SNS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SNSC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SNSCFE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SNSPTE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SPRRNI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SPSGFNS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SRRIS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SRRMRO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SSBS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SSCI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SSI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SSIC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SSMIIST">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SSOF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SSSDFI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SSWLH">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_STDE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_STFNR">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_STFONC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_STS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SWTSFIM">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SaFSC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SaLSC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SeNS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_SeNoS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_TAVUWNR">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_TCVWITQ">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_TEUSVRAS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_TEUSVRNS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_TMSVRAS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_TMSVRNS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_TNVUWAR">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_TTLW">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_TUVUWASR">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UFNIIC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UIUG">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_ULWCC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UNCIE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UNF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UPF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_USBFSA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_USSUG">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UUAM">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UUCF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UUCFNL">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UUCT">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UUCo">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UUF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UUL">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UULEP">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UUM">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UUMOAC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UUO">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UUOS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UUPM">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UUPOPF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UUR">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UURCFSC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UUSM">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UUVM">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UUW">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UWOC">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UuUF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UuUPOPF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UwUF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_UwUPOPF">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_VFSUN">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_VPAPTOV">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_VUR">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_VVI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_VVRTA">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_WANIL">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_WNIL">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_WUGRTCL">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_WWMI">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_WWS">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_XRPTJW">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_XRPTSE">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_XRPTSW">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "FB_XXFB">
        <edgePair/>
      </edge>
    </node>
    <node name = "Internationalization Rules" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = ""/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Internationalization Rules"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "summarized"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "code flaws having to do with internationalization and locale"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Critical"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DDE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ULWCC">
        <edgePair/>
      </edge>
    </node>
    <node name = "L100" type = "Package">
      <attribute type = "string" name = "Name" context = "attribute" value = "&lt;root_package&gt;"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "&lt;root_package&gt;"/>
      <attribute type = "int" name = "FB_UUF" context = "metric" value = "4"/>
      <attribute type = "int" name = "FB_EiER" context = "metric" value = "5"/>
      <attribute type = "int" name = "FB_MSBF" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_UUO" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_EER" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_NNOSP" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_NNPD" context = "metric" value = "1"/>
      <attribute type = "int" name = "Optimization Rules" context = "metricgroup" value = "4"/>
      <attribute type = "int" name = "Security Code Guideline Rules" context = "metricgroup" value = "7"/>
      <attribute type = "int" name = "Dodgy Code Rules" context = "metricgroup" value = "1"/>
      <attribute type = "int" name = "Correctness Rules" context = "metricgroup" value = "2"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "6"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "8"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L104">
        <edgePair/>
      </edge>
    </node>
    <node name = "L101" type = "FileSystem">
      <attribute type = "string" name = "Name" context = "attribute" value = "FileSystem"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "FileSystem"/>
      <edge type = "PhysicalTree" direction = "directional" to = "L105">
        <edgePair/>
      </edge>
    </node>
    <node name = "L102" type = "Component">
      <attribute type = "string" name = "Name" context = "attribute" value = "&lt;System&gt;"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "&lt;System&gt;"/>
      <attribute type = "string" name = "ChangesetID" context = "attribute" value = ""/>
      <attribute type = "string" name = "AnalysisTime" context = "attribute" value = "now"/>
      <attribute type = "int" name = "FB_UUF" context = "metric" value = "4"/>
      <attribute type = "int" name = "FB_EiER" context = "metric" value = "5"/>
      <attribute type = "int" name = "FB_MSBF" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_UUO" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_EER" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_NNOSP" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_NNPD" context = "metric" value = "1"/>
      <attribute type = "int" name = "Optimization Rules" context = "metricgroup" value = "4"/>
      <attribute type = "int" name = "Security Code Guideline Rules" context = "metricgroup" value = "7"/>
      <attribute type = "int" name = "Dodgy Code Rules" context = "metricgroup" value = "1"/>
      <attribute type = "int" name = "Correctness Rules" context = "metricgroup" value = "2"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "6"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "8"/>
      <edge type = "ComponentTree" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L103" type = "Component">
      <attribute type = "string" name = "Name" context = "attribute" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/.columbus_java/test-project.ljsi"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/.columbus_java/test-project.ljsi"/>
      <attribute type = "string" name = "ChangesetID" context = "attribute" value = ""/>
      <attribute type = "string" name = "AnalysisTime" context = "attribute" value = "now"/>
      <attribute type = "int" name = "FB_UUF" context = "metric" value = "4"/>
      <attribute type = "int" name = "FB_EiER" context = "metric" value = "5"/>
      <attribute type = "int" name = "FB_MSBF" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_UUO" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_EER" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_NNOSP" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_NNPD" context = "metric" value = "1"/>
      <attribute type = "int" name = "Optimization Rules" context = "metricgroup" value = "4"/>
      <attribute type = "int" name = "Security Code Guideline Rules" context = "metricgroup" value = "7"/>
      <attribute type = "int" name = "Dodgy Code Rules" context = "metricgroup" value = "1"/>
      <attribute type = "int" name = "Correctness Rules" context = "metricgroup" value = "2"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "6"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "8"/>
    </node>
    <node name = "L104" type = "Package">
      <attribute type = "string" name = "Name" context = "attribute" value = "example"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "1"/>
        <attribute type = "int" name = "Column" context = "" value = "1"/>
        <attribute type = "int" name = "EndLine" context = "" value = "47"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "1"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/Main.java"/>
        <attribute type = "int" name = "Line" context = "" value = "1"/>
        <attribute type = "int" name = "Column" context = "" value = "1"/>
        <attribute type = "int" name = "EndLine" context = "" value = "16"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "1"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/MyDate.java"/>
        <attribute type = "int" name = "Line" context = "" value = "1"/>
        <attribute type = "int" name = "Column" context = "" value = "1"/>
        <attribute type = "int" name = "EndLine" context = "" value = "23"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "1"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/NullPath.java"/>
        <attribute type = "int" name = "Line" context = "" value = "1"/>
        <attribute type = "int" name = "Column" context = "" value = "1"/>
        <attribute type = "int" name = "EndLine" context = "" value = "22"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "1"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "int" name = "FB_UUF" context = "metric" value = "4"/>
      <attribute type = "int" name = "FB_EiER" context = "metric" value = "5"/>
      <attribute type = "int" name = "FB_MSBF" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_UUO" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_EER" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_NNOSP" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_NNPD" context = "metric" value = "1"/>
      <attribute type = "int" name = "Optimization Rules" context = "metricgroup" value = "4"/>
      <attribute type = "int" name = "Security Code Guideline Rules" context = "metricgroup" value = "7"/>
      <attribute type = "int" name = "Dodgy Code Rules" context = "metricgroup" value = "1"/>
      <attribute type = "int" name = "Correctness Rules" context = "metricgroup" value = "2"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "6"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "8"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L119">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L152">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L165">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L189">
        <edgePair/>
      </edge>
    </node>
    <node name = "L105" type = "Folder">
      <attribute type = "string" name = "Name" context = "attribute" value = ""/>
      <attribute type = "string" name = "LongName" context = "attribute" value = ""/>
      <edge type = "PhysicalTree" direction = "directional" to = "L106">
        <edgePair/>
      </edge>
    </node>
    <node name = "L106" type = "Folder">
      <attribute type = "string" name = "Name" context = "attribute" value = "home"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "/home"/>
      <edge type = "PhysicalTree" direction = "directional" to = "L107">
        <edgePair/>
      </edge>
    </node>
    <node name = "L107" type = "Folder">
      <attribute type = "string" name = "Name" context = "attribute" value = "wolf"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "/home/wolf"/>
      <edge type = "PhysicalTree" direction = "directional" to = "L108">
        <edgePair/>
      </edge>
    </node>
    <node name = "L108" type = "Folder">
      <attribute type = "string" name = "Name" context = "attribute" value = "IdeaProjects"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "/home/wolf/IdeaProjects"/>
      <edge type = "PhysicalTree" direction = "directional" to = "L109">
        <edgePair/>
      </edge>
    </node>
    <node name = "L109" type = "Folder">
      <attribute type = "string" name = "Name" context = "attribute" value = "AIFix4SecCode"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "/home/wolf/IdeaProjects/AIFix4SecCode"/>
      <edge type = "PhysicalTree" direction = "directional" to = "L110">
        <edgePair/>
      </edge>
    </node>
    <node name = "L110" type = "Folder">
      <attribute type = "string" name = "Name" context = "attribute" value = "test-project"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project"/>
      <edge type = "PhysicalTree" direction = "directional" to = "L111">
        <edgePair/>
      </edge>
    </node>
    <node name = "L111" type = "Folder">
      <attribute type = "string" name = "Name" context = "attribute" value = "src"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src"/>
      <edge type = "PhysicalTree" direction = "directional" to = "L112">
        <edgePair/>
      </edge>
    </node>
    <node name = "L112" type = "Folder">
      <attribute type = "string" name = "Name" context = "attribute" value = "main"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main"/>
      <edge type = "PhysicalTree" direction = "directional" to = "L113">
        <edgePair/>
      </edge>
    </node>
    <node name = "L113" type = "Folder">
      <attribute type = "string" name = "Name" context = "attribute" value = "java"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java"/>
      <edge type = "PhysicalTree" direction = "directional" to = "L114">
        <edgePair/>
      </edge>
    </node>
    <node name = "L114" type = "Folder">
      <attribute type = "string" name = "Name" context = "attribute" value = "example"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example"/>
      <edge type = "PhysicalTree" direction = "directional" to = "L115">
        <edgePair/>
      </edge>
      <edge type = "PhysicalTree" direction = "directional" to = "L116">
        <edgePair/>
      </edge>
      <edge type = "PhysicalTree" direction = "directional" to = "L117">
        <edgePair/>
      </edge>
      <edge type = "PhysicalTree" direction = "directional" to = "L118">
        <edgePair/>
      </edge>
    </node>
    <node name = "L115" type = "File">
      <attribute type = "string" name = "Name" context = "attribute" value = "ArrayDemo.java"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
    </node>
    <node name = "L116" type = "File">
      <attribute type = "string" name = "Name" context = "attribute" value = "Main.java"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/Main.java"/>
    </node>
    <node name = "L117" type = "File">
      <attribute type = "string" name = "Name" context = "attribute" value = "MyDate.java"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/MyDate.java"/>
    </node>
    <node name = "L118" type = "File">
      <attribute type = "string" name = "Name" context = "attribute" value = "NullPath.java"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/NullPath.java"/>
    </node>
    <node name = "L119" type = "Class">
      <attribute type = "string" name = "Name" context = "attribute" value = "ArrayDemo"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.ArrayDemo"/>
      <attribute type = "int" name = "Anonymous" context = "attribute" value = "0"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "10"/>
        <attribute type = "int" name = "Column" context = "" value = "1"/>
        <attribute type = "int" name = "EndLine" context = "" value = "45"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "composite" name = "FB_UUF" context = "warning">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "16"/>
        <attribute type = "int" name = "Column" context = "" value = "0"/>
        <attribute type = "int" name = "EndLine" context = "" value = "16"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2147483647"/>
        <attribute type = "string" name = "WarningText" context = "" value = "Unread field: example.ArrayDemo.actions"/>
      </attribute>
      <attribute type = "composite" name = "FB_UUF" context = "warning">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "13"/>
        <attribute type = "int" name = "Column" context = "" value = "0"/>
        <attribute type = "int" name = "EndLine" context = "" value = "13"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2147483647"/>
        <attribute type = "string" name = "WarningText" context = "" value = "Unread field: example.ArrayDemo.permissionsToGive"/>
      </attribute>
      <attribute type = "composite" name = "FB_UUF" context = "warning">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "14"/>
        <attribute type = "int" name = "Column" context = "" value = "0"/>
        <attribute type = "int" name = "EndLine" context = "" value = "14"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2147483647"/>
        <attribute type = "string" name = "WarningText" context = "" value = "Unread field: example.ArrayDemo.permissionsToNeeded"/>
      </attribute>
      <attribute type = "composite" name = "FB_UUF" context = "warning">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "15"/>
        <attribute type = "int" name = "Column" context = "" value = "0"/>
        <attribute type = "int" name = "EndLine" context = "" value = "15"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2147483647"/>
        <attribute type = "string" name = "WarningText" context = "" value = "Unread field: example.ArrayDemo.permissionsToNotNeeded"/>
      </attribute>
      <attribute type = "int" name = "FB_UUF" context = "metric" value = "4"/>
      <attribute type = "int" name = "FB_EiER" context = "metric" value = "4"/>
      <attribute type = "int" name = "Optimization Rules" context = "metricgroup" value = "4"/>
      <attribute type = "int" name = "Security Code Guideline Rules" context = "metricgroup" value = "4"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "4"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "4"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L123">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L127">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L130">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L131">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L132">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L133">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L138">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L143">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L146">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L149">
        <edgePair/>
      </edge>
    </node>
    <node name = "L123" type = "Attribute">
      <attribute type = "string" name = "Name" context = "attribute" value = "author"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.ArrayDemo.author;Ljava/lang/String;"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "11"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "11"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "33"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "0"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L127" type = "Attribute">
      <attribute type = "string" name = "Name" context = "attribute" value = "permissionsToGive"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.ArrayDemo.permissionsToGive;[Ljava/lang/String;"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "13"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "13"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "47"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "0"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L130" type = "Attribute">
      <attribute type = "string" name = "Name" context = "attribute" value = "permissionsToNeeded"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.ArrayDemo.permissionsToNeeded;[Ljava/lang/String;"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "14"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "14"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "58"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "0"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L131" type = "Attribute">
      <attribute type = "string" name = "Name" context = "attribute" value = "permissionsToNotNeeded"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.ArrayDemo.permissionsToNotNeeded;[Ljava/lang/String;"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "15"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "15"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "61"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "0"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L132" type = "Attribute">
      <attribute type = "string" name = "Name" context = "attribute" value = "actions"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.ArrayDemo.actions;[Ljava/lang/String;"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "16"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "16"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "46"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "0"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L133" type = "Method">
      <attribute type = "string" name = "Name" context = "attribute" value = "ArrayDemo(String author)"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.ArrayDemo.&lt;init&gt;(Ljava/lang/String;)V"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "18"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "20"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "6"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "0"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L138" type = "Method">
      <attribute type = "string" name = "Name" context = "attribute" value = "ArrayDemo withPermissionsToGive(String[] permissionsToGive)"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.ArrayDemo.withPermissionsToGive([Ljava/lang/String;)Lexample/ArrayDemo;"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "23"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "26"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "6"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "composite" name = "FB_EiER" context = "warning">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "24"/>
        <attribute type = "int" name = "Column" context = "" value = "0"/>
        <attribute type = "int" name = "EndLine" context = "" value = "24"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2147483647"/>
        <attribute type = "string" name = "WarningText" context = "" value = "example.ArrayDemo.withPermissionsToGive(String[]) may expose internal representation by storing an externally mutable object into ArrayDemo.permissionsToGive"/>
      </attribute>
      <attribute type = "int" name = "FB_EiER" context = "metric" value = "1"/>
      <attribute type = "int" name = "Security Code Guideline Rules" context = "metricgroup" value = "1"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "1"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L143" type = "Method">
      <attribute type = "string" name = "Name" context = "attribute" value = "ArrayDemo withPermissionsToNeeded(String[] permissionsToNeeded)"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.ArrayDemo.withPermissionsToNeeded([Ljava/lang/String;)Lexample/ArrayDemo;"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "28"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "31"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "6"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "composite" name = "FB_EiER" context = "warning">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "29"/>
        <attribute type = "int" name = "Column" context = "" value = "0"/>
        <attribute type = "int" name = "EndLine" context = "" value = "29"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2147483647"/>
        <attribute type = "string" name = "WarningText" context = "" value = "example.ArrayDemo.withPermissionsToNeeded(String[]) may expose internal representation by storing an externally mutable object into ArrayDemo.permissionsToNeeded"/>
      </attribute>
      <attribute type = "int" name = "FB_EiER" context = "metric" value = "1"/>
      <attribute type = "int" name = "Security Code Guideline Rules" context = "metricgroup" value = "1"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "1"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L146" type = "Method">
      <attribute type = "string" name = "Name" context = "attribute" value = "ArrayDemo withPermissionsToNotNeeded(String[] permissionsToNotNeeded)"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.ArrayDemo.withPermissionsToNotNeeded([Ljava/lang/String;)Lexample/ArrayDemo;"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "33"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "36"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "6"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "composite" name = "FB_EiER" context = "warning">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "34"/>
        <attribute type = "int" name = "Column" context = "" value = "0"/>
        <attribute type = "int" name = "EndLine" context = "" value = "34"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2147483647"/>
        <attribute type = "string" name = "WarningText" context = "" value = "example.ArrayDemo.withPermissionsToNotNeeded(String[]) may expose internal representation by storing an externally mutable object into ArrayDemo.permissionsToNotNeeded"/>
      </attribute>
      <attribute type = "int" name = "FB_EiER" context = "metric" value = "1"/>
      <attribute type = "int" name = "Security Code Guideline Rules" context = "metricgroup" value = "1"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "1"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L149" type = "Method">
      <attribute type = "string" name = "Name" context = "attribute" value = "ArrayDemo withActions(String[] actions)"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.ArrayDemo.withActions([Ljava/lang/String;)Lexample/ArrayDemo;"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "39"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "42"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "6"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "composite" name = "FB_EiER" context = "warning">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/ArrayDemo.java"/>
        <attribute type = "int" name = "Line" context = "" value = "40"/>
        <attribute type = "int" name = "Column" context = "" value = "0"/>
        <attribute type = "int" name = "EndLine" context = "" value = "40"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2147483647"/>
        <attribute type = "string" name = "WarningText" context = "" value = "example.ArrayDemo.withActions(String[]) may expose internal representation by storing an externally mutable object into ArrayDemo.actions"/>
      </attribute>
      <attribute type = "int" name = "FB_EiER" context = "metric" value = "1"/>
      <attribute type = "int" name = "Security Code Guideline Rules" context = "metricgroup" value = "1"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "1"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L152" type = "Class">
      <attribute type = "string" name = "Name" context = "attribute" value = "Main"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.Main"/>
      <attribute type = "int" name = "Anonymous" context = "attribute" value = "0"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/Main.java"/>
        <attribute type = "int" name = "Line" context = "" value = "2"/>
        <attribute type = "int" name = "Column" context = "" value = "1"/>
        <attribute type = "int" name = "EndLine" context = "" value = "15"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "composite" name = "FB_MSBF" context = "warning">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/Main.java"/>
        <attribute type = "int" name = "Line" context = "" value = "3"/>
        <attribute type = "int" name = "Column" context = "" value = "0"/>
        <attribute type = "int" name = "EndLine" context = "" value = "3"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2147483647"/>
        <attribute type = "string" name = "WarningText" context = "" value = "example.Main.MY_CONSTANT isn&apos;t final but should be"/>
      </attribute>
      <attribute type = "int" name = "FB_MSBF" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_UUO" context = "metric" value = "1"/>
      <attribute type = "int" name = "Security Code Guideline Rules" context = "metricgroup" value = "1"/>
      <attribute type = "int" name = "Dodgy Code Rules" context = "metricgroup" value = "1"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "2"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L154">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L155">
        <edgePair/>
      </edge>
    </node>
    <node name = "L154" type = "Attribute">
      <attribute type = "string" name = "Name" context = "attribute" value = "MY_CONSTANT"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.Main.MY_CONSTANT;Ljava/lang/String;"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/Main.java"/>
        <attribute type = "int" name = "Line" context = "" value = "3"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "3"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "73"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "0"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L155" type = "Method">
      <attribute type = "string" name = "Name" context = "attribute" value = "void main(String[] args)"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.Main.main([Ljava/lang/String;)V"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/Main.java"/>
        <attribute type = "int" name = "Line" context = "" value = "5"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "14"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "6"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "composite" name = "FB_UUO" context = "warning">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/Main.java"/>
        <attribute type = "int" name = "Line" context = "" value = "12"/>
        <attribute type = "int" name = "Column" context = "" value = "0"/>
        <attribute type = "int" name = "EndLine" context = "" value = "12"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2147483647"/>
        <attribute type = "string" name = "WarningText" context = "" value = "Useless object stored in variable ad of method example.Main.main(String[])"/>
      </attribute>
      <attribute type = "int" name = "FB_UUO" context = "metric" value = "1"/>
      <attribute type = "int" name = "Dodgy Code Rules" context = "metricgroup" value = "1"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "1"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L165" type = "Class">
      <attribute type = "string" name = "Name" context = "attribute" value = "MyDate"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.MyDate"/>
      <attribute type = "int" name = "Anonymous" context = "attribute" value = "0"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/MyDate.java"/>
        <attribute type = "int" name = "Line" context = "" value = "7"/>
        <attribute type = "int" name = "Column" context = "" value = "1"/>
        <attribute type = "int" name = "EndLine" context = "" value = "22"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "int" name = "FB_EER" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_EiER" context = "metric" value = "1"/>
      <attribute type = "int" name = "Security Code Guideline Rules" context = "metricgroup" value = "2"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "2"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L177">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L172">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L182">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L184">
        <edgePair/>
      </edge>
    </node>
    <node name = "L172" type = "Method">
      <attribute type = "string" name = "Name" context = "attribute" value = "Date getDate()"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.MyDate.getDate()Ljava/util/Date;"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/MyDate.java"/>
        <attribute type = "int" name = "Line" context = "" value = "11"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "13"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "6"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "composite" name = "FB_EER" context = "warning">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/MyDate.java"/>
        <attribute type = "int" name = "Line" context = "" value = "12"/>
        <attribute type = "int" name = "Column" context = "" value = "0"/>
        <attribute type = "int" name = "EndLine" context = "" value = "12"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2147483647"/>
        <attribute type = "string" name = "WarningText" context = "" value = "example.MyDate.getDate() may expose internal representation by returning MyDate.date"/>
      </attribute>
      <attribute type = "int" name = "FB_EER" context = "metric" value = "1"/>
      <attribute type = "int" name = "Security Code Guideline Rules" context = "metricgroup" value = "1"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "1"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L177" type = "Attribute">
      <attribute type = "string" name = "Name" context = "attribute" value = "date"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.MyDate.date;Ljava/util/Date;"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/MyDate.java"/>
        <attribute type = "int" name = "Line" context = "" value = "8"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "8"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "30"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "0"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L182" type = "Method">
      <attribute type = "string" name = "Name" context = "attribute" value = "void setDate(Date date)"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.MyDate.setDate(Ljava/util/Date;)V"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/MyDate.java"/>
        <attribute type = "int" name = "Line" context = "" value = "15"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "17"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "6"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "composite" name = "FB_EiER" context = "warning">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/MyDate.java"/>
        <attribute type = "int" name = "Line" context = "" value = "16"/>
        <attribute type = "int" name = "Column" context = "" value = "0"/>
        <attribute type = "int" name = "EndLine" context = "" value = "16"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2147483647"/>
        <attribute type = "string" name = "WarningText" context = "" value = "example.MyDate.setDate(Date) may expose internal representation by storing an externally mutable object into MyDate.date"/>
      </attribute>
      <attribute type = "int" name = "FB_EiER" context = "metric" value = "1"/>
      <attribute type = "int" name = "Security Code Guideline Rules" context = "metricgroup" value = "1"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "1"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L184" type = "Method">
      <attribute type = "string" name = "Name" context = "attribute" value = "Date foo()"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.MyDate.foo()Ljava/util/Date;"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/MyDate.java"/>
        <attribute type = "int" name = "Line" context = "" value = "19"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "21"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "6"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "0"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L189" type = "Class">
      <attribute type = "string" name = "Name" context = "attribute" value = "NullPath"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.NullPath"/>
      <attribute type = "int" name = "Anonymous" context = "attribute" value = "0"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/NullPath.java"/>
        <attribute type = "int" name = "Line" context = "" value = "3"/>
        <attribute type = "int" name = "Column" context = "" value = "1"/>
        <attribute type = "int" name = "EndLine" context = "" value = "21"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "int" name = "FB_NNOSP" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_NNPD" context = "metric" value = "1"/>
      <attribute type = "int" name = "Correctness Rules" context = "metricgroup" value = "2"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "2"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "0"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L191">
        <edgePair/>
      </edge>
      <edge type = "LogicalTree" direction = "directional" to = "L202">
        <edgePair/>
      </edge>
    </node>
    <node name = "L191" type = "Method">
      <attribute type = "string" name = "Name" context = "attribute" value = "int foo(String str)"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.NullPath.foo(Ljava/lang/String;)I"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/NullPath.java"/>
        <attribute type = "int" name = "Line" context = "" value = "4"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "13"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "6"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "composite" name = "FB_NNOSP" context = "warning">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/NullPath.java"/>
        <attribute type = "int" name = "Line" context = "" value = "7"/>
        <attribute type = "int" name = "Column" context = "" value = "0"/>
        <attribute type = "int" name = "EndLine" context = "" value = "7"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2147483647"/>
        <attribute type = "string" name = "WarningText" context = "" value = "Possible null pointer dereference of null in example.NullPath.foo(String)"/>
        <attribute type = "composite" name = "ExtraInfo" context = "trace">
          <attribute type = "composite" name = "SourceLink" context = "">
            <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/NullPath.java"/>
            <attribute type = "int" name = "Line" context = "" value = "6"/>
            <attribute type = "int" name = "Column" context = "" value = "0"/>
            <attribute type = "int" name = "EndLine" context = "" value = "6"/>
            <attribute type = "int" name = "EndColumn" context = "" value = "2147483647"/>
            <attribute type = "string" name = "Message" context = "" value = "Known null at NullPath.java:[line 6]"/>
          </attribute>
        </attribute>
      </attribute>
      <attribute type = "int" name = "FB_NNOSP" context = "metric" value = "1"/>
      <attribute type = "int" name = "Correctness Rules" context = "metricgroup" value = "1"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "1"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "0"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "L202" type = "Method">
      <attribute type = "string" name = "Name" context = "attribute" value = "void main(String[] args)"/>
      <attribute type = "string" name = "LongName" context = "attribute" value = "example.NullPath.main([Ljava/lang/String;)V"/>
      <attribute type = "composite" name = "Position" context = "attribute">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/NullPath.java"/>
        <attribute type = "int" name = "Line" context = "" value = "15"/>
        <attribute type = "int" name = "Column" context = "" value = "5"/>
        <attribute type = "int" name = "EndLine" context = "" value = "20"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "6"/>
        <attribute type = "string" name = "RealizationLevel" context = "" value = "definition"/>
      </attribute>
      <attribute type = "composite" name = "FB_NNPD" context = "warning">
        <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/NullPath.java"/>
        <attribute type = "int" name = "Line" context = "" value = "19"/>
        <attribute type = "int" name = "Column" context = "" value = "0"/>
        <attribute type = "int" name = "EndLine" context = "" value = "19"/>
        <attribute type = "int" name = "EndColumn" context = "" value = "2147483647"/>
        <attribute type = "string" name = "WarningText" context = "" value = "Null passed for non-null parameter of foo(String) in example.NullPath.main(String[])"/>
        <attribute type = "composite" name = "ExtraInfo" context = "trace">
          <attribute type = "composite" name = "SourceLink" context = "">
            <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/NullPath.java"/>
            <attribute type = "int" name = "Line" context = "" value = "16"/>
            <attribute type = "int" name = "Column" context = "" value = "0"/>
            <attribute type = "int" name = "EndLine" context = "" value = "16"/>
            <attribute type = "int" name = "EndColumn" context = "" value = "2147483647"/>
            <attribute type = "string" name = "Message" context = "" value = "Null value at NullPath.java:[line 16]"/>
          </attribute>
          <attribute type = "composite" name = "SourceLink" context = "">
            <attribute type = "string" name = "Path" context = "" value = "/home/wolf/IdeaProjects/AIFix4SecCode/test-project/src/main/java/example/NullPath.java"/>
            <attribute type = "int" name = "Line" context = "" value = "17"/>
            <attribute type = "int" name = "Column" context = "" value = "0"/>
            <attribute type = "int" name = "EndLine" context = "" value = "17"/>
            <attribute type = "int" name = "EndColumn" context = "" value = "2147483647"/>
            <attribute type = "string" name = "Message" context = "" value = "Known null at NullPath.java:[line 17]"/>
          </attribute>
        </attribute>
      </attribute>
      <attribute type = "int" name = "FB_NNPD" context = "metric" value = "1"/>
      <attribute type = "int" name = "Correctness Rules" context = "metricgroup" value = "1"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "1"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "0"/>
      <edge type = "Component" direction = "directional" to = "L103">
        <edgePair/>
      </edge>
    </node>
    <node name = "Multithreaded Correctness Rules" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = ""/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Multithreaded Correctness Rules"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "summarized"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "code flaws having to do with threads, locks, and volatiles"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Critical"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_AOSOCA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DCL">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DCTR">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DMWOC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DPC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DSOB">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DSOBP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DSOSC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DSOUBP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DUT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ESB">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IFNG">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IIS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_JJCWRTA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_JJLM">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_JJUM">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_LLIS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_LLIUS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MMN">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MMSF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MMW">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MSOFTGCTF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MSOUF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NNN">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NNNN">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_NSANCF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RRS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_RRVOPI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SIOSCI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SIOSDFI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SSCI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SSIC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SSOF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SSSDFI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SSWLH">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_TTLW">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_USSUG">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UUL">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UULEP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UUW">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_VVI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_VVRTA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_WANIL">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_WNIL">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_WUGRTCL">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_WWS">
        <edgePair/>
      </edge>
    </node>
    <node name = "Optimization Rules" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = ""/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Optimization Rules"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "summarized"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "code that is not necessarily incorrect but may be inefficient"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Critical"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BBIU">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BBIUTPC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BUACFTO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_BUIR">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DBC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DBMOU">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DBPFC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DBPFP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DBPT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DCOU">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DFNC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DNCGCE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DNVN">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DSC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DSVC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_HHSSC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IEGLIL">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IIIO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IILIO">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IIMA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IPCIL">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IPCILI">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_IPSIL">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_ITGC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_OTAC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SISBS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SISBSA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SISBSNT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SSBS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_STS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_USBFSA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UUF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UUM">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UUPM">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UWOC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_UuUF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_WWMI">
        <edgePair/>
      </edge>
    </node>
    <node name = "Security Code Guideline Rules" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = ""/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Security Code Guideline Rules"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "summarized"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "code that is vulnerable to attacks from untrusted code"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Critical"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DCCIDP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DDIDP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EER">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EESR">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_EiER">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_FSBP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MCBF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MFP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MMA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MMC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MMCP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MMH">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MOP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MRIA">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MSBF">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_MSBRTBF">
        <edgePair/>
      </edge>
    </node>
    <node name = "Vulnerability Rules" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = ""/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Vulnerability Rules"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "summarized"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "A use of untrusted input in a way that could create a remotely exploitable security vulnerability."/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul">
        <attribute type = "string" name = "Priority" context = "rul" value = "Critical"/>
      </attribute>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DCDP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_DEDP">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_HRPTC">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_HRPTHH">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_PAPT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_PRPT">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SNSPTE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_SPSGFNS">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_XRPTJW">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_XRPTSE">
        <edgePair/>
      </edge>
      <edge type = "RulGroupContains" direction = "directional" to = "FB_XRPTSW">
        <edgePair/>
      </edge>
    </node>
    <node name = "WarningBlocker" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Number of warnings with Blocker priority"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Blocker Warnings"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "Number of warnings with Blocker priority"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul"/>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "WarningCritical" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Number of warnings with Critical priority"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Critical Warnings"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "Number of warnings with Critical priority"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul"/>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "WarningInfo" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Number of warnings with Info priority"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Info Warnings"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "Number of warnings with Info priority"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul"/>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "WarningMajor" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Number of warnings with Major priority"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Major Warnings"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "Number of warnings with Major priority"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul"/>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "WarningMinor" type = "RulMetric">
      <attribute type = "string" name = "Description" context = "rul" value = "Number of warnings with Minor priority"/>
      <attribute type = "string" name = "DisplayName" context = "rul" value = "Minor Warnings"/>
      <attribute type = "string" name = "Enabled" context = "rul" value = "true"/>
      <attribute type = "string" name = "GroupType" context = "rul" value = "false"/>
      <attribute type = "string" name = "HelpText" context = "rul" value = "Number of warnings with Minor priority"/>
      <attribute type = "string" name = "Warning" context = "rul" value = "true"/>
      <attribute type = "composite" name = "Settings" context = "rul"/>
      <attribute type = "composite" name = "Calculated" context = "rul"/>
    </node>
    <node name = "__AUTOMATIC__" type = "RulTool">
      <edge type = "RulTree" direction = "directional" to = "WarningBlocker">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "WarningCritical">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "WarningMajor">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "WarningMinor">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "WarningInfo">
        <edgePair/>
      </edge>
    </node>
    <node name = "__LogicalRoot__" type = "TreeRoot">
      <attribute type = "int" name = "FB_UUF" context = "metric" value = "4"/>
      <attribute type = "int" name = "FB_EiER" context = "metric" value = "5"/>
      <attribute type = "int" name = "FB_MSBF" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_UUO" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_EER" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_NNOSP" context = "metric" value = "1"/>
      <attribute type = "int" name = "FB_NNPD" context = "metric" value = "1"/>
      <attribute type = "int" name = "Optimization Rules" context = "metricgroup" value = "4"/>
      <attribute type = "int" name = "Security Code Guideline Rules" context = "metricgroup" value = "7"/>
      <attribute type = "int" name = "Dodgy Code Rules" context = "metricgroup" value = "1"/>
      <attribute type = "int" name = "Correctness Rules" context = "metricgroup" value = "2"/>
      <attribute type = "int" name = "WarningBlocker" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningCritical" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningMajor" context = "metric" value = "6"/>
      <attribute type = "int" name = "WarningMinor" context = "metric" value = "0"/>
      <attribute type = "int" name = "WarningInfo" context = "metric" value = "8"/>
      <edge type = "LogicalTree" direction = "directional" to = "L100">
        <edgePair/>
      </edge>
    </node>
    <node name = "__PhysicalRoot__" type = "TreeRoot">
      <edge type = "PhysicalTree" direction = "directional" to = "L101">
        <edgePair/>
      </edge>
    </node>
    <node name = "__RulGroups__" type = "RulTreeNode">
      <edge type = "RulTree" direction = "directional" to = "Bad Practice Rules">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "Correctness Rules">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "Dodgy Code Rules">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "Experimental Rules">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "Internationalization Rules">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "Multithreaded Correctness Rules">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "Optimization Rules">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "Security Code Guideline Rules">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "Vulnerability Rules">
        <edgePair/>
      </edge>
    </node>
    <node name = "__RulRoot__" type = "TreeRoot">
      <edge type = "RulTree" direction = "directional" to = "FindBugs">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "__RulGroups__">
        <edgePair/>
      </edge>
      <edge type = "RulTree" direction = "directional" to = "__AUTOMATIC__">
        <edgePair/>
      </edge>
    </node>
  </data>
</graph>
