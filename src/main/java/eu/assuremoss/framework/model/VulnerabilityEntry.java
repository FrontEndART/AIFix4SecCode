package eu.assuremoss.framework.model;

import lombok.Data;
import org.w3c.dom.NodeList;

@Data
public class VulnerabilityEntry {

    /**
     * Normal vulnerability name that is mapped with the magic name
     */
    private String type;
    /**
     * Magic vulnerability name that should be converted to normal
     */
    private String vulnType;
    private String description;
    private String path;
    private String variable;
    private int startLine;
    private int endLine;
    private int startCol;
    private int endCol;

    @Override
    public String toString() {
        return "VulnerabilityEntry{" +
                "type='" + type + '\n' +
                ", description='" + description + '\n' +
                ", path='" + path + '\n' +
                ", startLine=" + startLine + '\n' +
                ", endLine=" + endLine + '\n' +
                ", startCol=" + startCol + '\n' +
                ", endCol=" + endCol +
                '}';
    }

    public static VulnerabilityEntry createVulnerabilityEntry(NodeList warnAttributes, String problemType, String variable, String vulnType) {
        VulnerabilityEntry ve = new VulnerabilityEntry();

        ve.setType(problemType);

        for (int j = 0; j < warnAttributes.getLength(); j++) {
            if (warnAttributes.item(j).getAttributes() != null) {
                String attrType = warnAttributes.item(j).getAttributes().getNamedItem("name").getNodeValue();
                if ("ExtraInfo".equals(attrType)) {
                    continue;
                }
                String attrVal = warnAttributes.item(j).getAttributes().getNamedItem("value").getNodeValue();
                switch (attrType) {
                    case "Path":
                        ve.setPath(attrVal);
                        break;
                    case "Line":
                        ve.setStartLine(Integer.parseInt(attrVal));
                        break;
                    case "EndLine":
                        ve.setEndLine(Integer.parseInt(attrVal));
                        break;
                    case "WarningText":
                        ve.setDescription(attrVal);
                        break;
                }
            }
        }

        ve.setVulnType(vulnType);
        ve.setVariable(variable);

        return ve;
    }
}
